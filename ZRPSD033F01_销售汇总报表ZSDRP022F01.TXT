*&---------------------------------------------------------------------*
*&  包含                ZSDRP022F01
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  FRM_GET_AUSP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_ausp .
  REFRESH:gt_ausp.
*  根据物料取出产品线和系列
  SELECT a~objek a~atinn a~atwrt b~atnam
   INTO CORRESPONDING FIELDS OF TABLE gt_ausp
   FROM ausp AS a INNER JOIN cabn AS b ON a~atinn = b~atinn
   WHERE b~atnam IN ('ZFER_XL','ZFER_CPX','ZFER_ZXL','ZFER_DYZXH').
  SORT gt_ausp BY objek.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  frm_get_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_data .
  REFRESH:gt_vbrp.
  DATA lv_date TYPE char8.
  r_year = 'IBT'.
  CONCATENATE p_year '01' '01' INTO lv_date.
  r_year-low = lv_date.
  CLEAR lv_date.
  CONCATENATE p_year '12' '31' INTO lv_date.
  r_year-high = lv_date.
  APPEND r_year.

*  PERFORM frm_get_ausp.
* 根据选择屏幕从表vbrp中取出交货单信息
  SELECT a~vbeln a~posnr b~vkorg b~vtweg a~matnr AS objek a~arktx a~fkimg a~vrkme a~kzwi1 AS zpric_yb a~vgbel a~vgpos
         b~waerk a~aubel b~kunag AS kunnr b~vkorg b~fkdat c~spart b~fkart b~bukrs
         e~bzirk d~vkbur d~vkgrp d~kvgr1 b~kurrf AS kursk
    INTO CORRESPONDING FIELDS OF TABLE gt_vbrp
    FROM vbrp AS a INNER JOIN vbrk AS b ON a~vbeln = b~vbeln
                   INNER JOIN mara AS c ON a~matnr = c~matnr
                   INNER JOIN vbak AS d ON a~aubel = d~vbeln
                   INNER JOIN vbkd AS e ON a~aubel = e~vbeln
   WHERE
    b~fkdat IN r_year
*     AND b~bukrs IN s_bukrs
*     AND b~vkorg IN s_vkorg
*     AND b~vtweg IN s_vtweg
*     AND b~kunag IN s_kunnr
*     AND c~matkl IN s_matkl
*     AND c~spart IN s_spart
     AND  b~fkart LIKE 'Z%' "( 'ZF1','ZF2','ZF3','ZF4','ZF1S','ZF2S','ZF3S','ZF4S','ZG' )
     AND e~posnr EQ space.
*     AND d~kvgr1 IN  s_kvgr1
*     AND d~kvgr2 IN s_kvgr2 "add by wusk 20170118
*     AND e~bzirk  IN s_bzirk
*     AND d~vkbur IN s_vkbur  "add by wusk 20170118
*     AND d~vkgrp IN s_vkgrp . "add by wusk 20170118

  CHECK gt_vbrp[] IS NOT INITIAL.
  SORT gt_vbrp BY vbeln posnr.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_PROCESS_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_process_data .
* 取客户
  DATA:
*  lt_knvv  LIKE knvv OCCURS 0 WITH HEADER LINE,
*        lt_kna1  LIKE kna1 OCCURS 0 WITH HEADER LINE,
    lt_t171t LIKE t171t OCCURS 0 WITH HEADER LINE, "销售大区描述
    lt_tvkbt LIKE tvkbt OCCURS 0 WITH HEADER LINE, "行办描述
    lt_tvgrt LIKE tvgrt OCCURS 0 WITH HEADER LINE "销售组描述
*        lt_tvv1t LIKE tvv1t OCCURS 0 WITH HEADER LINE. "业务员描述
    .

  PERFORM frm_ztsd001a.

  DATA: lv_knumv LIKE konv-knumv,
        lv_kposn LIKE konv-kposn,
        lv_tabix LIKE sy-tabix,
        lv_zmeng LIKE vbap-zmeng.
*  根据选择屏幕条件从表KNVV中取出客户相关信息
*  SELECT * INTO TABLE lt_knvv
*    FROM knvv
*   WHERE kunnr IN s_kunnr
*     AND vkorg IN s_vkorg
*     AND vtweg IN s_vtweg
*     AND bzirk IN s_bzirk
*     AND vkbur IN s_vkbur
*     AND vkgrp IN s_vkgrp
*     AND kvgr1 IN s_kvgr1
*     AND kvgr2 IN s_kvgr2.
*  SORT lt_knvv BY kunnr vkorg vtweg.
*  根据客户取出客户主数据
*  SELECT * INTO TABLE lt_kna1 FROM kna1 WHERE kunnr IN s_kunnr.
*  SORT lt_kna1 BY kunnr.
*  取销售大区描述
  SELECT * INTO TABLE lt_t171t FROM t171t WHERE spras EQ sy-langu .
  SORT lt_t171t BY bzirk.
*  取行办描述
  SELECT * INTO TABLE lt_tvkbt FROM tvkbt WHERE spras EQ sy-langu .
  SORT lt_tvkbt BY vkbur.
*  取销售组描述
  SELECT * INTO TABLE lt_tvgrt FROM tvgrt WHERE spras EQ sy-langu .
  SORT lt_tvgrt BY vkgrp.
*  取业务员描述
*  SELECT * INTO TABLE lt_tvv1t FROM tvv1t WHERE spras EQ sy-langu AND kvgr1 IN s_kvgr1.
*  SORT lt_tvv1t BY kvgr1.

*  DATA:lv_kvgr11 LIKE knvv-kvgr1.
  REFRESH:gt_alv.
  LOOP AT gt_vbrp.
    CLEAR:lv_tabix,gt_alv.
    lv_tabix = sy-tabix.
****权限字段检查
*    AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
*             ID 'VKORG' FIELD gt_vbrp-vkorg
*             ID 'VTWEG' DUMMY
*             ID 'SPART' DUMMY
*             ID 'ACTVT' FIELD '03'.
*    IF sy-subrc <> 0.
*      DELETE gt_vbrp INDEX lv_tabix.
*      CONTINUE.
*    ENDIF.

*  取产品系列
*    LOOP AT gt_ausp WHERE objek = gt_vbrp-objek.
*      CASE gt_ausp-atnam.
*        WHEN 'ZFER_CPX'.
*          gt_vbrp-zfer_cpx = gt_ausp-atwrt.
*        WHEN 'ZFER_XL'.
*          gt_vbrp-zfer_xl = gt_ausp-atwrt.
*        WHEN 'ZFER_ZXL'.
*          gt_vbrp-zfer_zxl = gt_ausp-atwrt.
*        WHEN 'ZFER_DYZXH'.
*          gt_vbrp-zfer_zxh = gt_ausp-atwrt.
*        WHEN OTHERS.
*      ENDCASE.
*    ENDLOOP.

*    IF gt_vbrp-zfer_cpx NOT IN s_cpx.
*      DELETE gt_vbrp INDEX lv_tabix.
*      CONTINUE.
*    ENDIF.
*
*    IF gt_vbrp-zfer_xl NOT IN s_xl.
*      DELETE gt_vbrp INDEX lv_tabix.
*      CONTINUE.
*    ENDIF.

*  取销售大区、行办、销售组、业务员
*    CLEAR: lt_knvv.
*    READ TABLE lt_knvv WITH KEY kunnr = gt_vbrp-kunag vkorg = gt_vbrp-vkorg vtweg = gt_vbrp-vtweg BINARY SEARCH.
*    CHECK sy-subrc = 0.
*    IF gt_vbrp-kunnr = 'A000' OR gt_vbrp-kunnr = 'C000'.
*      AUTHORITY-CHECK OBJECT 'Z_KVGR1'
*               ID 'KVGR1' FIELD gt_vbrp-kvgr1.
*    ELSE.  "取客户主数据业务员，进行权限控制 20180103 YZP
*      CLEAR lv_kvgr11.
*      SELECT SINGLE kvgr1 INTO lv_kvgr11 FROM knvv WHERE kunnr = gt_vbrp-kunnr AND vkorg = gt_vbrp-vkorg .
*      AUTHORITY-CHECK OBJECT 'Z_KVGR1'
*               ID 'KVGR1' FIELD lv_kvgr11.
*    ENDIF.
*    IF sy-subrc <> 0.
*      DELETE gt_vbrp INDEX lv_tabix.
*      CONTINUE.
*    ENDIF.
    gt_alv-bzirk = gt_vbrp-bzirk."销售大区
    gt_alv-vkbur = gt_vbrp-vkbur."行办
    gt_alv-vkgrp = gt_vbrp-vkgrp."销售组
*    gt_alv-kvgr1 = gt_vbrp-kvgr1."业务员
    gt_alv-zxsyf = gt_vbrp-fkdat+0(6)."销售月份

*    IF p_r3 EQ 'X'.
*      gt_alv-kunnr = gt_vbrp-kunnr."客户
*    ENDIF.
    IF gt_vbrp-fkart EQ 'ZG8' OR gt_vbrp-fkart EQ 'ZG8S' OR gt_vbrp-fkart EQ 'ZF8' OR gt_vbrp-fkart EQ 'ZF8S'.
      gt_alv-fkimg = 0.
    ELSE.
      gt_alv-fkimg = gt_vbrp-fkimg."销售量
    ENDIF.

*  根据销售订单和订单行项目计算订单单价= KZWI1 / ZMENG
*   计算金额=单价* 发货数量 = KZWI1 / ZMENG * lfimg
*    CLEAR: gt_vbap,lv_knumv,lv_zmeng.
*    READ TABLE gt_vbap WITH KEY vbeln = gt_vbrp-vgbel posnr = gt_vbrp-vgpos BINARY SEARCH.
*    IF gt_vbap-zmeng NE 0.
*      lv_zmeng = gt_vbap-zmeng.
*    ELSEIF gt_vbap-kwmeng NE 0.
*      lv_zmeng = gt_vbap-kwmeng.
*    ENDIF.

    "原币金额，本币金额
    gt_alv-zxse_yb = gt_vbrp-zpric_yb.
    gt_alv-zxse_bb = gt_alv-zxse_yb * gt_vbrp-kursk .
*  贷项凭证，乘以-1
    IF gt_vbrp-fkart EQ 'ZF1S' OR gt_vbrp-fkart EQ 'ZF4S' OR gt_vbrp-fkart EQ 'ZF8S' OR gt_vbrp-fkart EQ 'ZG1'  OR gt_vbrp-fkart EQ 'ZG4' OR gt_vbrp-fkart EQ 'ZG8'.
      gt_alv-fkimg = gt_alv-fkimg * ( -1 ).
*      gt_alv-zxse_yb = gt_alv-zxse_yb * ( -1 ).
*      gt_alv-zxse_bb = gt_alv-zxse_bb * ( -1 ).
      gt_alv-zxse_bb = gt_alv-zxse_bb * ( -1 ).
    ENDIF.

*    IF p_r3 EQ 'X'.
*      gt_alv-waerk = gt_alv-waerk.
*    ENDIF.
*    lv_knumv = gt_vbap-knumv.
*    lv_knumv = gt_vbap-knumv.
*    lv_kposn = gt_vbap-posnr.
*  计算本币：根据价格条件号和行项目号从表KONV中取出汇率
*    CLEAR: gt_vbkd.
*    READ TABLE gt_vbkd WITH KEY vbeln = gt_vbrp-vgbel BINARY SEARCH.
*    gt_alv-zxse_bb = gt_alv-zxse_yb * gt_vbkd-kursk .


* 当选中业务员+系列或者业务员+客户+系列时，才填值
*    IF p_r2 EQ 'X' OR p_r3 EQ 'X'.
*      gt_alv-zfer_xl = gt_vbrp-zfer_xl.
*    ENDIF.
*    IF p_r4 EQ 'X'.
*      gt_alv-zfer_zxh = gt_vbrp-zfer_zxh.
*    ENDIF.

*    IF p_r3 EQ 'X'.
*      CLEAR: lt_kna1.
*      READ TABLE lt_kna1 WITH KEY kunnr = gt_alv-kunnr BINARY SEARCH.
*      CONCATENATE lt_kna1-name1 lt_kna1-name2 INTO gt_alv-name.
*      IF gt_alv-kunnr = 'A000' OR gt_alv-kunnr = 'C000'.
*        gt_alv-name = '零散客户'.
*      ENDIF.
*    ENDIF.

    MOVE-CORRESPONDING gt_alv TO gt_alv_total.
*    gt_alv_total-vbeln = gt_vbrp-vbeln.
*    gt_alv_total-posnr = gt_vbrp-posnr.
*    gt_alv_total-waerk = gt_vbrp-waerk.
*    gt_alv_total-aubel = gt_vbrp-aubel.
*    gt_alv_total-vgbel = gt_vbrp-vgbel.
*    gt_alv_total-vgpos = gt_vbrp-vgpos.
    gt_alv_total-bzirk = gt_vbrp-bzirk."销售大区
    gt_alv_total-vkbur = gt_vbrp-vkbur."行办
    gt_alv_total-vkgrp = gt_vbrp-vkgrp."销售组
*    gt_alv_total-kvgr1 = gt_vbrp-kvgr1."业务员
*    gt_alv_total-bukrs = gt_vbrp-bukrs."公司代码

    COLLECT gt_alv_total.
*    COLLECT gt_alv.
    CLEAR:gt_alv_total.
  ENDLOOP.

*  LOOP AT gt_alv.
**   取销售大区描述
*    READ TABLE lt_t171t WITH KEY bzirk = gt_alv-bzirk BINARY SEARCH.
*    IF sy-subrc = 0.
*      gt_alv-bztxt = lt_t171t-bztxt.
*    ENDIF.
**   取行办描述
**    READ TABLE lt_tvkbt WITH KEY vkbur = gt_alv-vkbur BINARY SEARCH.
**    IF sy-subrc = 0.
**      gt_alv-bezei_vkbur = lt_tvkbt-bezei.
**    ENDIF.
***   取销售组描述
**    READ TABLE lt_tvgrt WITH KEY vkgrp = gt_alv-vkgrp BINARY SEARCH.
**    IF sy-subrc = 0.
**      gt_alv-bezei_vkgrp = lt_tvgrt-bezei.
**    ENDIF.
***   取业务员描述
**    READ TABLE lt_tvv1t WITH KEY kvgr1 = gt_alv-kvgr1 BINARY SEARCH.
**    IF sy-subrc = 0.
**      gt_alv-bezei_kvgr1 = lt_tvv1t-bezei.
**    ENDIF.
*    MODIFY gt_alv.
*    CLEAR:gt_alv.
*  ENDLOOP.

  LOOP AT gt_alv_total.
*   取销售大区描述
    READ TABLE lt_t171t WITH KEY bzirk = gt_alv_total-bzirk BINARY SEARCH.
    IF sy-subrc = 0.
      gt_alv_total-bztxt = lt_t171t-bztxt.
    ENDIF.
*   取行办描述
    READ TABLE lt_tvkbt WITH KEY vkbur = gt_alv_total-vkbur BINARY SEARCH.
    IF sy-subrc = 0.
      gt_alv_total-bezei_vkbur = lt_tvkbt-bezei.
    ENDIF.
*   取销售组描述
    READ TABLE lt_tvgrt WITH KEY vkgrp = gt_alv_total-vkgrp BINARY SEARCH.
    IF sy-subrc = 0.
      gt_alv_total-bezei_vkgrp = lt_tvgrt-bezei.
    ENDIF.
**   取业务员描述
*    READ TABLE lt_tvv1t WITH KEY kvgr1 = gt_alv_total-kvgr1 BINARY SEARCH.
*    IF sy-subrc = 0.
*      gt_alv_total-bezei_kvgr1 = lt_tvv1t-bezei.
*    ENDIF.
    READ TABLE gt_sd001a WITH  KEY bzirk = gt_alv_total-bzirk  vkbur = gt_alv_total-vkbur vkgrp = gt_alv_total-vkgrp zxsyf = gt_alv_total-zxsyf.
    IF sy-subrc = 0.
      gt_alv_total-zjhsl = gt_sd001a-zbyjh_sw.
      gt_alv_total-zjhje = gt_alv_total-zjhsl * gt_alv_total-zxse_bb / gt_alv_total-fkimg.
    ENDIF.
    MODIFY gt_alv_total.
    CLEAR:gt_alv_total.
  ENDLOOP.
*  SORT gt_alv BY bzirk vkbur vkgrp kvgr1 kunnr zfer_xl.
  SORT gt_alv_total BY bzirk vkbur vkgrp.
  FIELD-SYMBOLS: <f1> TYPE any,<f2> TYPE any,<f3> TYPE any,<f4> TYPE any.
  DATA: lv1  TYPE string,lv2 TYPE string,lv3 TYPE string,lv4 TYPE string,lv TYPE i,lv_c TYPE char2.
  LOOP AT gt_alv_total.
    lv = gt_alv_total-zxsyf+4(2).
    lv_c = lv.

    READ TABLE gt_last WITH  KEY bzirk = gt_alv_total-bzirk  vkbur = gt_alv_total-vkbur vkgrp = gt_alv_total-vkgrp.
    IF sy-subrc = 0.
      CONCATENATE 'GT_LAST-FKIMG' lv_c INTO lv1.
      CONDENSE lv1.
      ASSIGN (lv1) TO <f1>.
      <f1> = gt_alv_total-fkimg.

      CONCATENATE 'GT_LAST-ZJHSL' lv_c INTO lv2.
      CONDENSE lv2.
      ASSIGN (lv2) TO <f2>.
      <f2> = gt_alv_total-zjhsl.

      CONCATENATE 'GT_LAST-ZBB' lv_c INTO lv3.
      CONDENSE lv3.
      ASSIGN (lv3) TO <f3>.
      <f3> = gt_alv_total-zxse_bb.

      CONCATENATE 'GT_LAST-ZJHJE' lv_c INTO lv4.
      CONDENSE lv4.
      ASSIGN (lv4) TO <f4>.
      <f4> = gt_alv_total-zjhje.

      MODIFY gt_last INDEX sy-tabix.
    ELSE.
      MOVE-CORRESPONDING gt_alv_total TO gt_last.
      CONCATENATE 'GT_LAST-FKIMG' lv_c INTO lv1.
      CONDENSE lv1.
      ASSIGN (lv1) TO <f1>.
      <f1> = gt_alv_total-fkimg.

      CONCATENATE 'GT_LAST-ZJHSL' lv_c INTO lv2.
      CONDENSE lv2.
      ASSIGN (lv2) TO <f2>.
      <f2> = gt_alv_total-zjhsl.

      CONCATENATE 'GT_LAST-ZBB' lv_c INTO lv3.
      CONDENSE lv3.
      ASSIGN (lv3) TO <f3>.
      <f3> = gt_alv_total-zxse_bb.

      CONCATENATE 'GT_LAST-ZJHJE' lv_c INTO lv4.
      CONDENSE lv4.
      ASSIGN (lv4) TO <f4>.
      <f4> = gt_alv_total-zjhje.
      APPEND gt_last.
    ENDIF.


    CLEAR: lv,lv1,lv2,lv3,lv4,lv_c,gt_last.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SUB_BUILD_FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sub_build_fieldcat .
  REFRESH:g_it_fieldcat.
*  PERFORM sub_fieldcat1 USING 'X' 'BZIRK'       '销售大区代码'      ''  ''  ''  ''  ''  ''  '' ''.
  PERFORM sub_fieldcat1 USING 'X' 'BZTXT'       '销售大区'          ''  ''  ''  ''  ''  ''  '' ''.
*  PERFORM sub_fieldcat1 USING 'X' 'VKBUR'       '行办代码'          ''  ''  ''  ''  ''  ''  '' ''.
  PERFORM sub_fieldcat1 USING 'X' 'BEZEI_VKBUR' '行办'              ''  ''  ''  ''  ''  ''  '' ''.
*  PERFORM sub_fieldcat1 USING 'X' 'VKGRP'       '销售组代码'        ''  ''  ''  ''  ''  ''  '' ''.
  PERFORM sub_fieldcat1 USING 'X' 'BEZEI_VKGRP' '销售组'            ''  ''  ''  ''  ''  ''  '' ''.
  PERFORM sub_fieldcat1 USING ''  'ZXSYF'       '销售月份'          ''  ''  ''  ''  ''  ''  '' ''.
*  PERFORM sub_fieldcat1 USING ''  'ZJHSL'     '计划数量'        'X'  ''  ''  ''  ''  ''  '' ''.
*  PERFORM sub_fieldcat1 USING ''  'ZJHJE'     '计划销售额'        'X'  ''  ''  ''  ''  ''  '' ''.
*  PERFORM sub_fieldcat1 USING ''  'FKIMG'       '销售数量'          'X'  ''  ''  ''  ''  ''  '' ''.
*  PERFORM sub_fieldcat1 USING ''  'ZXSE_BB'     '本币销售额'        'X'  ''  ''  ''  ''  ''  '' ''.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_ZTSD001A
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_ztsd001a .
  SELECT zmonth AS zxsyf  kunnr zbyjh_sw  INTO CORRESPONDING FIELDS OF TABLE gt_sd001a FROM ztsd001a FOR ALL ENTRIES IN gt_vbrp WHERE kunnr = gt_vbrp-kunnr AND zmonth IN r_year.
  LOOP AT gt_sd001a.
    SELECT SINGLE bzirk vkbur vkgrp INTO ( gt_sd001a-bzirk, gt_sd001a-vkbur, gt_sd001a-vkgrp ) FROM knvv WHERE kunnr = gt_sd001a-kunnr.
    gt_sd001a-kunnr = ''.
    MODIFY gt_sd001a.
  ENDLOOP.
  SORT gt_sd001a BY zxsyf bzirk vkbur vkgrp.
  DATA lt_sd LIKE TABLE OF gt_sd001a WITH HEADER LINE.
  LOOP AT gt_sd001a.
    MOVE-CORRESPONDING gt_sd001a TO lt_sd.
    COLLECT lt_sd.
  ENDLOOP.
  CLEAR gt_sd001a.
  REFRESH gt_sd001a.
  gt_sd001a[] = lt_sd[].
  SORT gt_sd001a BY zxsyf bzirk vkbur vkgrp.
ENDFORM.

FORM sub_fieldcat1 USING p_key p_field p_text p_zero p_dosum p_bgcolor p_edit p_outlen p_reffield p_reftable p_mask.
  CLEAR g_it_fieldcat.
    DATA: lv1 TYPE string VALUE '1', lv TYPE string.
  IF p_field = 'ZXSYF'.
    DO 12 TIMES.
      CONCATENATE  'ZJHSL' lv1 INTO lv.
      g_it_fieldcat-fieldname = lv.
      CLEAR lv.
      CONCATENATE   lv1 '月计划数量' INTO lv.
      CONDENSE lv NO-GAPS.
      g_it_fieldcat-reptext_ddic  = lv.
      APPEND g_it_fieldcat.
      CLEAR lv.
      CONCATENATE  'ZJHJE ' lv1 INTO lv.
      g_it_fieldcat-fieldname = lv.
      CLEAR lv.
      CONCATENATE   lv1 '月计划金额' INTO lv.
      CONDENSE lv NO-GAPS.
      g_it_fieldcat-reptext_ddic  = lv.
      APPEND g_it_fieldcat.
      CLEAR lv.
      CONCATENATE  'FKIMG' lv1 INTO lv.
      g_it_fieldcat-fieldname = lv.
      CLEAR lv.
      CONCATENATE   lv1 '月销售数量' INTO lv.
      CONDENSE lv NO-GAPS.
      g_it_fieldcat-reptext_ddic  = lv.
      APPEND g_it_fieldcat.
      CLEAR lv.
      CONCATENATE  'ZBB' lv1 INTO lv.
      g_it_fieldcat-fieldname = lv.
      CLEAR lv.
      CONCATENATE   lv1 '月销售金额' INTO lv.
      CONDENSE lv NO-GAPS.
      g_it_fieldcat-reptext_ddic  = lv.
      APPEND g_it_fieldcat.
      CLEAR lv.
      lv1 = lv1 + 1.
    ENDDO.
    EXIT .
  ENDIF.

  g_it_fieldcat-key = p_key.
  g_it_fieldcat-fieldname = p_field.
  g_it_fieldcat-reptext_ddic = p_text.
  g_it_fieldcat-no_zero = p_zero.
  g_it_fieldcat-checkbox = p_dosum.
  g_it_fieldcat-emphasize = p_bgcolor.
  g_it_fieldcat-edit = p_edit.
  g_it_fieldcat-outputlen = p_outlen.
  g_it_fieldcat-ref_fieldname = p_reffield.
  g_it_fieldcat-ref_tabname = p_reftable.
  g_it_fieldcat-lowercase = p_mask.
  APPEND g_it_fieldcat.

ENDFORM.
