*&---------------------------------------------------------------------*
*&  包含                ZRPPP001F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      FORM  frm_initial_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*


FORM frm_initial_data .
*******数据定义*******
  INCLUDE <icon>.
  DATA ls_functxt TYPE smp_dyntxt.
  DATA:gt_exbut TYPE TABLE OF sy-ucomm.
*******初始化*******
*******程序主体******
  "屏幕工具栏中按饼
  "启用自定义工具
  CLEAR ls_functxt.
  ls_functxt-icon_text = '模板下载'."'Download Template'.
  ls_functxt-icon_id   = '@49@'.
  ls_functxt-quickinfo =  '模板下载'.
  sscrfields-functxt_01 = ls_functxt.
ENDFORM.


*&---------------------------------------------------------------------*
*&      FORM  frm_filename_find
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--p_p_file  text
*----------------------------------------------------------------------*


FORM frm_filename_find CHANGING xc_file.
  CALL FUNCTION 'WS_FILENAME_GET'
    EXPORTING
      def_filename     = xc_file
      def_path         = 'C:\'
      mask             = ',*.XLS.'
      mode             = 'O'
      title            = '文件名'
    IMPORTING
      filename         = xc_file
    EXCEPTIONS
      inv_winsys       = 1
      no_batch         = 2
      selection_cancel = 3
      selection_error  = 4
      OTHERS           = 5.
ENDFORM.


*&---------------------------------------------------------------------*
*&      FORM  frm_download_template
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->p_0036   text
*      <--p_p_file  text
*----------------------------------------------------------------------*


FORM frm_download_template USING u_objid LIKE wwwdatatab-objid CHANGING ic_file.
  DATA:l_path   TYPE string.

  CALL METHOD zcl_ole_excel=>download_templet
    EXPORTING
      iv_objid        = u_objid
      iv_win_title    = '请指定下载路径'
      iv_df_extension = 'XLS'
    IMPORTING
      ev_fullpath     = l_path.

  CALL METHOD cl_gui_frontend_services=>execute
    EXPORTING
      document = l_path
    EXCEPTIONS
      OTHERS   = 10.
ENDFORM.


*&---------------------------------------------------------------------*
*&      FORM  frm_upload_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*


FORM frm_upload_data .
  DATA:ls_header LIKE LINE OF gt_header.
  DATA:ls_table_field LIKE  tabfield,
       lv_string      TYPE string.
  FIELD-SYMBOLS:<fs_field>    TYPE any..

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_file
      i_begin_col             = 2
      i_begin_row             = 4
      i_end_col               = 100
      i_end_row               = 9999
    TABLES
      intern                  = gt_upload
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
***将数据整理到内表中

  LOOP AT gt_upload ASSIGNING <fs_data>.
    IF <fs_data>-row EQ 1.
      MOVE-CORRESPONDING <fs_data> TO gt_header.
      APPEND gt_header.
      CONTINUE.
    ENDIF.
    CONDENSE <fs_data>-value.
    CLEAR ls_header.
    READ TABLE gt_header INTO ls_header WITH KEY col = <fs_data>-col.
    IF <fs_data>-value NE '/' AND ls_header-value IS NOT INITIAL.
      ls_table_field-tabname    = 'ZSPP_ROUTING_DATA'.
      ls_table_field-fieldname  = ls_header-value.
*& 字段校验
      CALL FUNCTION 'RS_CHECK_CONV_EX_2_IN'
        EXPORTING
          input_external               = <fs_data>-value
          table_field                  = ls_table_field
        EXCEPTIONS
          input_not_numerical          = 1
          too_many_decimals            = 2
          more_than_one_sign           = 3
          ill_thousand_separator_dist  = 4
          too_many_digits              = 5
          sign_for_unsigned            = 6
          too_large                    = 7
          too_small                    = 8
          invalid_date_format          = 9
          invalid_date                 = 10
          invalid_time_format          = 11
          invalid_time                 = 12
          invalid_hex_digit            = 13
          unexpected_error             = 14
          invalid_fieldname            = 15
          field_and_descr_incompatible = 16
          input_too_long               = 17
          no_decimals                  = 18
          invalid_float                = 19
          conversion_exit_error        = 20
          OTHERS                       = 21.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO lv_string.
        MESSAGE e001(00) WITH 'ROW,COL' <fs_data>-row <fs_data>-col lv_string.
      ENDIF.
    ENDIF.
    CONDENSE <fs_data>-value.
    ASSIGN COMPONENT ls_header-value OF STRUCTURE gt_out TO <fs_field>.
    IF sy-subrc = 0.
      <fs_field> = <fs_data>-value.
    ENDIF.
    AT END OF row.              "新的一行EXCEL数据_结束
      PERFORM frm_check_data.
      APPEND gt_out.            "收集一行EXCEL数据
      CLEAR gt_out.
    ENDAT.
  ENDLOOP.

ENDFORM.


*&---------------------------------------------------------------------*
*&      FORM  frm_check_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*


FORM frm_check_data .
  IF gt_out-matnr IS INITIAL OR
     gt_out-werks IS INITIAL OR
     gt_out-plnal IS INITIAL OR
     gt_out-verwe IS INITIAL OR
     gt_out-statu IS INITIAL OR
     gt_out-arbpl IS INITIAL OR
     gt_out-werkw IS INITIAL.
    mcr_add_msg:'请输入必输字段'.
  ENDIF.

  IF gt_out-matnr IS NOT INITIAL.
    CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
      EXPORTING
        input        = gt_out-matnr
      IMPORTING
        output       = gt_out-matnr
      EXCEPTIONS
        length_error = 1
        OTHERS       = 2.

    SELECT SINGLE * FROM mara WHERE matnr = gt_out-matnr.
    IF sy-subrc NE 0.
      mcr_add_msg:'物料不存在'.
    ENDIF.
  ENDIF.

  IF gt_out-werks IS NOT INITIAL.
    SELECT SINGLE * FROM t001w WHERE werks = gt_out-werks.
    IF sy-subrc NE 0.
      mcr_add_msg:'工厂不存在'.
    ENDIF.
  ENDIF.

  IF gt_out-plnal IS NOT INITIAL.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gt_out-plnal
      IMPORTING
        output = gt_out-plnal.
  ENDIF.
  IF gt_out-vornr IS NOT INITIAL.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gt_out-vornr
      IMPORTING
        output = gt_out-vornr.
  ENDIF.

  IF gt_out-zmsg IS NOT INITIAL.
    gt_out-zicon = icon_led_red.
    gt_out-msgty = 'E'.
  ENDIF.
ENDFORM.


*&---------------------------------------------------------------------*
*&      FORM  frm_get_fieldcat
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*


FORM frm_get_fieldcat .
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
*     I_BUFFER_ACTIVE        =
      i_structure_name       = 'ZSPP_ROUTING_DATA'
*     I_CLIENT_NEVER_DISPLAY = 'X'
*     i_bypassing_buffer     =
*     i_internal_tabname     =
    CHANGING
      ct_fieldcat            = gt_fcat[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  gt_fcat-fieldname = 'ZICON'.
  gt_fcat-coltext  = '状态'.
  gt_fcat-scrtext_l = '状态'.
  gt_fcat-scrtext_m = '状态'.
  gt_fcat-scrtext_s = '状态'.
  gt_fcat-inttype = 'C'.
  gt_fcat-intlen = '30'.
  INSERT gt_fcat INDEX 1.
  CLEAR gt_fcat.

  gt_fcat-fieldname = 'ZMSG'.
  gt_fcat-coltext  = '消息'.
  gt_fcat-scrtext_l = '消息'.
  gt_fcat-scrtext_m = '消息'.
  gt_fcat-scrtext_s = '消息'.
  gt_fcat-inttype = 'C'.
  gt_fcat-intlen = '200'.
  APPEND gt_fcat..
  CLEAR gt_fcat.

  gs_layout-cwidth_opt = 'X'.
  gs_layout-zebra = 'X'.
  gs_layout-no_toolbar = 'X'.
ENDFORM.


*&---------------------------------------------------------------------*
*&      FORM  frm_output_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*


FORM frm_output_data .
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'FRM_PF_STATUS'
      i_callback_user_command  = 'FRM_USER_COMMAND'
*     I_CALLBACK_TOP_OF_PAGE   = ' '
*     i_callback_html_top_of_page = ' '
*     i_callback_html_end_of_list = ' '
*     i_structure_name         =
*     i_background_id          = ' '
*     i_grid_title             =
*     i_grid_settings          =
      is_layout_lvc            = gs_layout
      it_fieldcat_lvc          = gt_fcat[]
*     IT_EXCLUDING             =
*     it_special_groups_lvc    =
*     it_sort_lvc              =
*     it_filter_lvc            =
*     it_hyperlink             =
*     is_sel_hide              =
      i_default                = 'X'
      i_save                   = 'A'
**     IS_VARIANT                  =
*     it_events                =
*     it_event_exit            =
*     is_print_lvc             =
*     is_reprep_id_lvc         =
*     i_screen_start_column    = 0
*     i_screen_start_line      = 0
*     i_screen_end_column      = 0
*     i_screen_end_line        = 0
*     i_html_height_top        =
*     i_html_height_end        =
*     it_alv_graphics          =
*     it_except_qinfo_lvc      =
*     ir_salv_fullscreen_adapter  =
*   IMPORTING
*     e_exit_caused_by_caller  =
*     es_exit_caused_by_user   =
    TABLES
      t_outtab                 = gt_out[]
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.
  IF sy-subrc <> 0.


* Implement suitable error handling here


  ENDIF.
ENDFORM.



*&---------------------------------------------------------------------*
*&      FORM  frm_pf_status
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*


FORM frm_pf_status USING rt_extab TYPE slis_t_extab.
  SET PF-STATUS 'PF_1000'.
ENDFORM.


*&---------------------------------------------------------------------*
*&      FORM  frm_user_command
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*


FORM frm_user_command USING r_ucomm LIKE sy-ucomm
                            rs_selfield TYPE slis_selfield..

  DATA:lv_grid TYPE REF TO cl_gui_alv_grid.

  rs_selfield-refresh = 'X'.
  rs_selfield-col_stable = 'X'.
  rs_selfield-row_stable = 'X'.

  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = lv_grid.

  CASE r_ucomm.
    WHEN 'ZUPLOAD'.  "导入数据
      PERFORM frm_create_routing.
      CALL METHOD lv_grid->set_frontend_layout
        EXPORTING
          is_layout = gs_layout.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.


*&---------------------------------------------------------------------*
*&      FORM  frm_create_routing
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*


FORM frm_create_routing .
  DATA:lt_task              LIKE bapi1012_tsk_c OCCURS 0 WITH HEADER LINE,
       ls_task              LIKE bapi1012_tsk_c,
       lt_mattaskallocation LIKE bapi1012_mtk_c OCCURS 0 WITH HEADER LINE,
       ls_mattaskallocation LIKE bapi1012_mtk_c,
       lt_operation         LIKE bapi1012_opr_c OCCURS 0 WITH HEADER LINE,
       ls_operation         LIKE bapi1012_opr_c.
  DATA:lv_group        LIKE bapi1012_tsk_c-task_list_group,
       lv_groupcounter LIKE bapi1012_tsk_c-group_counter.
  DATA:lt_return LIKE bapiret2 OCCURS 0 WITH HEADER LINE.
  DATA:lv_msg       TYPE string,
       lv_msg_total TYPE string.
  DATA:lv_meins LIKE mara-meins.
  DATA:lv_plnnr LIKE mapl-plnnr.

  READ TABLE gt_out WITH KEY msgty = 'E'.
  IF sy-subrc = 0.
    MESSAGE '上传数据存在错误，请先修正' TYPE 'I'.
    EXIT.
  ENDIF.

  LOOP AT gt_out ASSIGNING <fs_out> WHERE msgty IS INITIAL.
    AT NEW plnal.
      CLEAR:ls_task,ls_mattaskallocation,lv_meins,lv_plnnr.
      SELECT SINGLE a~plnnr
        INTO lv_plnnr
        FROM mapl AS a INNER JOIN plko AS b
          ON a~plnnr = b~plnnr
         AND a~plnal = b~plnal
        WHERE a~matnr = <fs_out>-matnr
          AND a~werks = <fs_out>-werks
          AND a~plnty = 'N'
          AND b~verwe = <fs_out>-verwe
          AND a~loekz = ''.

      ls_mattaskallocation-task_list_group = lv_plnnr.
      ls_mattaskallocation-material = <fs_out>-matnr.
      ls_mattaskallocation-plant = <fs_out>-werks.
      ls_mattaskallocation-group_counter = <fs_out>-plnal.
      ls_mattaskallocation-valid_from = sy-datum.
      ls_mattaskallocation-valid_to_date = '99991231'.
      APPEND ls_mattaskallocation TO lt_mattaskallocation.
      CLEAR ls_mattaskallocation.

      ls_task-task_list_group = lv_plnnr.
      ls_task-group_counter = <fs_out>-plnal.
      ls_task-valid_from = sy-datum.
      ls_task-valid_to_date = '99991231'.
      SELECT SINGLE meins INTO lv_meins  FROM mara WHERE matnr = <fs_out>-matnr.
      ls_task-task_measure_unit_iso = lv_meins.
      ls_task-task_measure_unit = lv_meins.
      ls_task-lot_size_to = '99999999'.
      ls_task-description = <fs_out>-ktext.
      ls_task-plant = <fs_out>-werks.
      ls_task-task_list_usage = <fs_out>-verwe.
      ls_task-task_list_status = <fs_out>-statu.
      APPEND ls_task TO lt_task.
      CLEAR ls_task.
    ENDAT.

    CLEAR ls_operation.
    ls_operation-task_list_group = lv_plnnr.
    ls_operation-group_counter = <fs_out>-plnal.
    ls_operation-valid_from = sy-datum.
    ls_operation-valid_to_date = '99991231'.
    ls_operation-activity   = <fs_out>-vornr.
    ls_operation-description = <fs_out>-ltxa1.
    ls_operation-work_cntr = <fs_out>-arbpl.
    ls_operation-plant     = <fs_out>-werkw.
    ls_operation-control_key = <fs_out>-steus.
    ls_operation-cost_relevant = 'X'.
    ls_operation-base_quantity = <fs_out>-bmsch.
    ls_operation-operation_measure_unit = lv_meins.
    ls_operation-std_value_01 = <fs_out>-vgw01.
    ls_operation-std_unit_01  = 'MIN'.
    ls_operation-std_value_02 = <fs_out>-vgw02.
    ls_operation-std_unit_02  = 'MIN'.
    ls_operation-ind_splitting_reqrd = <fs_out>-spmus.
    ls_operation-max_no_of_splits = <fs_out>-splim.
    ls_operation-denominator = '1'.
    ls_operation-nominator = '1'.
    APPEND ls_operation TO lt_operation.
    CLEAR ls_operation.

    AT END OF plnal.
      CLEAR:lv_group,lv_groupcounter.
      CALL FUNCTION 'BAPI_ROUTING_CREATE'
        IMPORTING
          group                  = lv_group
          groupcounter           = lv_groupcounter
        TABLES
          task                   = lt_task
          materialtaskallocation = lt_mattaskallocation
          operation              = lt_operation
          return                 = lt_return.
      LOOP AT lt_return WHERE  type = 'E' OR type = 'A'.
        EXIT.
      ENDLOOP.
      IF sy-subrc = 0.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        CLEAR lv_msg_total.
        LOOP AT lt_return WHERE type = 'E' OR type = 'A'.
          CLEAR:lv_msg.
          CALL FUNCTION 'MESSAGE_TEXT_BUILD'
            EXPORTING
              msgid               = lt_return-id
              msgnr               = lt_return-number
              msgv1               = lt_return-message_v1
              msgv2               = lt_return-message_v2
              msgv3               = lt_return-message_v3
              msgv4               = lt_return-message_v4
            IMPORTING
              message_text_output = lv_msg.
          IF lv_msg_total IS INITIAL.
            lv_msg_total = lv_msg.
          ELSE.
            CONCATENATE lv_msg_total lv_msg INTO lv_msg_total SEPARATED BY ','.
          ENDIF.
        ENDLOOP.
        <fs_out>-zicon = icon_led_red.
        <fs_out>-msgty = 'E'.
        <fs_out>-zmsg = lv_msg_total.
        MODIFY gt_out FROM <fs_out> TRANSPORTING zicon msgty zmsg WHERE matnr = <fs_out>-matnr AND werks = <fs_out>-werks AND plnal = <fs_out>-plnal.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
        <fs_out>-zicon = icon_led_green.
        <fs_out>-msgty = 'S'.
        CONCATENATE lv_group lv_groupcounter INTO <fs_out>-zmsg SEPARATED BY '/'.
        MODIFY gt_out FROM <fs_out> TRANSPORTING zicon msgty zmsg WHERE matnr = <fs_out>-matnr AND werks = <fs_out>-werks AND plnal = <fs_out>-plnal.
      ENDIF.
      REFRESH:lt_task,lt_mattaskallocation,lt_operation,lt_return.
      CLEAR:lv_group,lv_groupcounter,lt_task,lt_mattaskallocation,lt_operation,lt_return.
    ENDAT.
  ENDLOOP.
ENDFORM.
