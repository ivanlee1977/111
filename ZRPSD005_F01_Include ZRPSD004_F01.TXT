*&---------------------------------------------------------------------*
*&  包含                ZRPSD004_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  FRM_GETDATA
*
*&---------------------------------------------------------------------*
*       SPRAS = 1. 语言取默认值，否认会限出错误值，但不会报错
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_getdata .
  DATA: lv_index LIKE sy-tabix,zstr TYPE char200.

  SELECT
        a~vkorg
        b~vtweg       "分销渠道
        b~spart         "产品组
        a~kunag
        a~vbeln
        a~erdat
        d~bzirk
        c~kvgr1
        d~ihrez
        c~kvgr2
        d~zterm
        a~vkbur
        b~posnr
        b~matnr
        b~arktx
        b~vrkme
        b~lfimg
        b~kzwi1
        a~knumv
        b~vgbel
        b~vgpos
        a~waerk
         INTO CORRESPONDING FIELDS OF TABLE gt_likp
    FROM likp AS a JOIN lips AS b ON a~vbeln = b~vbeln
    INNER JOIN vbak AS c ON b~vgbel = c~vbeln
    INNER JOIN vbkd AS d ON c~vbeln = d~vbeln AND d~posnr = '000000'
    WHERE  a~vkorg = s_vkorg
       AND a~vbeln IN s_vbeln
       AND a~erdat IN s_erdat
       AND a~kunnr IN s_kunag
       AND b~vgbel IN s_vgbel
       AND b~matnr IN s_matnr
       AND c~kvgr1 IN s_kvgr1
       AND c~kvgr2 IN s_kvgr2
       AND d~bzirk IN s_bzirk

    .

  CHECK gt_likp[] IS NOT INITIAL.

*************************
  DATA: lv_s1 TYPE char10.
  DATA:  lt_adrc  LIKE TABLE OF adrc WITH HEADER LINE.
  DATA: BEGIN OF lt_vbak OCCURS 0,
          knumv LIKE vbak-knumv,
          vbeln LIKE vbak-vbeln,
        END OF lt_vbak.
  DATA lv_knumv LIKE vbak-knumv.

*  SELECT SINGLE b~bzirk a~kvgr1 a~kvgr2 INTO CORRESPONDING FIELDS OF gt_likp
*    FROM vbak AS a JOIN vbkd AS b ON a~vbeln = b~vbeln
*    WHERE a~kvgr1 IN s_kvgr1
*    AND a~kvgr2 IN s_kvgr2
*    AND b~bzirk IN s_bzirk      .
*  IF sy-subrc NE 0.   "条件过滤
*    DELETE gt_likp.
*    CONTINUE.
*  ENDIF.
  DATA:lv_kvgr11 LIKE knvv-kvgr1.
  LOOP AT gt_likp.
    SELECT SINGLE zsum INTO gt_likp-zsum FROM zprintnum WHERE zpo = gt_likp-vbeln AND zprgname = 'ZSD005'.
    IF s_zprint NE 'X' AND sy-subrc EQ 0.   "未打印订单过滤
      DELETE gt_likp.
      CONTINUE.
    ENDIF.

    IF gt_likp-kunag = 'A000' OR gt_likp = 'C000'.
      AUTHORITY-CHECK OBJECT 'Z_KVGR1'
               ID 'KVGR1' FIELD gt_likp-kvgr1.
    ELSE.  "取客户主数据业务员，进行权限控制 20180103  YZP
      CLEAR lv_kvgr11.
      SELECT SINGLE kvgr1 INTO lv_kvgr11 FROM knvv WHERE kunnr = gt_likp-kunag AND vkorg = gt_likp-vkorg.
      AUTHORITY-CHECK OBJECT 'Z_KVGR1'
               ID 'KVGR1' FIELD lv_kvgr11.
    ENDIF.
    IF sy-subrc <> 0.
      DELETE gt_likp.
      CONTINUE.
    ENDIF.

    SELECT SINGLE vtext INTO gt_likp-vtext1 FROM tvtwt WHERE vtweg = gt_likp-vtweg.
    SELECT SINGLE vtext INTO gt_likp-vtext2 FROM tspat WHERE spart = gt_likp-spart.

    SELECT SINGLE adrnr INTO lv_s1 FROM vbpa WHERE vbeln = gt_likp-vbeln AND parvw = 'AG' .
    SELECT SINGLE * INTO lt_adrc  FROM adrc  WHERE addrnumber = lv_s1 .
    CONCATENATE lt_adrc-name1  lt_adrc-name2 INTO gt_likp-name   .
    CONCATENATE lt_adrc-name_co lt_adrc-str_suppl1 lt_adrc-str_suppl2 INTO gt_likp-addr  . "20171207

    CLEAR lt_adrc.
    REFRESH lt_adrc.
    SELECT SINGLE adrnr INTO lv_s1 FROM vbpa WHERE vbeln = gt_likp-vbeln AND parvw = 'WE' .
    SELECT SINGLE * INTO lt_adrc  FROM adrc  WHERE addrnumber = lv_s1 .
    CONCATENATE lt_adrc-name1  lt_adrc-name2 INTO gt_likp-ship   .
    CONCATENATE lt_adrc-street lt_adrc-str_suppl3 lt_adrc-location  INTO gt_likp-shipaddr  . "20171207
*    CONCATENATE lt_adrc-street lt_adrc-house_num1 INTO gt_likp-shipaddr  .
    gt_likp-extension1 = lt_adrc-extension1.
    gt_likp-tel_number = lt_adrc-tel_number.
    gt_likp-fax_number = lt_adrc-fax_number.


    SELECT SINGLE kzwi1 kwmeng INTO CORRESPONDING FIELDS OF gt_likp FROM vbap WHERE vbeln = gt_likp-vgbel AND posnr = gt_likp-vgpos.
    gt_likp-kzwi = gt_likp-kzwi1 / gt_likp-kwmeng.
    gt_likp-kzwi1 = gt_likp-kzwi * gt_likp-lfimg.

    SELECT SINGLE bezei AS bezei3 tel fax INTO CORRESPONDING FIELDS OF gt_likp FROM ztsd002 WHERE kvgr1 = gt_likp-kvgr1.

    SELECT SINGLE a~knumv INTO lv_knumv FROM vbak AS a INNER JOIN lips AS b ON b~vgbel = a~vbeln WHERE b~vbeln = gt_likp-vbeln.
    SELECT SINGLE kbetr INTO gt_likp-kbetr FROM konv WHERE knumv = lv_knumv AND kposn = ''.
*    SELECT SINGLE name_text INTO gt_likp-name_text FROM adrp WHERE persnumber = gt_likp-ernam  .
*    CASE gt_likp-frgke .
*      WHEN '' OR 'Y'.
*        gt_likp-frgke1 = '审批通过'.
*      WHEN 'N'.
*        gt_likp-frgke1 = '未审批'.
*      WHEN 'X'.
*        gt_likp-frgke1 = '拒绝'.
*    ENDCASE.
*
    MODIFY gt_likp.
  ENDLOOP.

  SORT gt_likp BY vbeln.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GETFACT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_getfact .
  g_fieldfcat:
  'VKORG' '销售组织' 'VKORG' 'LIKP',
  'VTEXT1' '分销渠道' 'VTEXT' 'TSPAT',
  'ERDAT' '创建日期' 'ERDAT' 'LIKP',
  'VBELN' '交货单号' 'VBELN' 'LIKP',
  'POSNR' '交货项目' 'POSNR' 'LIPS',
  'MATNR' '产品编码' 'MATNR' 'LIPS',
  'ARKTX' '品名规格' 'ARKTX' 'LIPS',
  'VRKME' '单位' 'VRKME' 'LIPS',
  'LFIMG' '数量' 'LFIMG' 'LIPS',
  'KZWI' '单价' 'KZWI1' 'LIPS',
  'KZWI1' '价税合计' 'KZWI1' 'LIPS',
  'VTEXT2' '产品组' 'VTEXT' 'TSPAT',
*  'KUNAG' '客户编码' 'KUNAG' 'LIKP',
  'NAME' '客户名称' '' '',
  'ADDR' '客户地址' '' '',
  'EXTENSION1' '联系人' 'EXTENSION1' 'ADRC',
  'TEL_NUMBER' '联系电话' 'TEL_NUMBER' 'ADRC',
  'FAX_NUMBER' '传真' 'FAX_NUMBER' 'ADRC',
  'KVGR1' '销售' 'KVGR2' 'LIKP',
  'KVGR2' '商务' 'KVGR2' 'LIKP',
  'VGBEL' '销售订单' 'VGBEL' 'LIPS',
  'VGPOS' '订单项目' 'VGPOS' 'LIPS',
  'ZSUM' '已打印' '' ''
*  'BEZEI' '订单类型' 'BEZEI' 'TVAKT',
 .


  gs_layout-colwidth_optimize = 'X'.
  gs_layout-box_fieldname = 'CHK'.
  gs_layout-box_tabname = 'gt_likp'.
*  gs_layout-edit = 'X'.
  gs_layout-zebra = 'X'.
*  gs_layout-no_vline = 'X'.
*  gs_layout-no_hline = 'X'.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_SHOW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM  frm_show .

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'FRM_PF_STATUS'
      i_callback_user_command  = 'FRM_USER_COMMAND'
      is_layout                = gs_layout
      it_fieldcat              = gt_fcat[]
    TABLES
      t_outtab                 = gt_likp[]
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
           WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.

FORM frm_pf_status USING rt_extab TYPE slis_t_extab.
  DATA: BEGIN OF tab OCCURS 0,
          fcode LIKE rsmpe-func,
        END OF tab.

  tab-fcode = '&ETA'. APPEND tab.
  tab-fcode = '&SL'. APPEND tab.
  tab-fcode = '&OL0'. APPEND tab.
  tab-fcode = '&INFO'. APPEND tab.

  SET PF-STATUS '0100'
  EXCLUDING tab IMMEDIATELY.
ENDFORM.

FORM frm_user_command  USING r_ucomm LIKE sy-ucomm
                           rs_selfield TYPE slis_selfield.

  DATA: lv_grid TYPE REF TO cl_gui_alv_grid.

  rs_selfield-refresh = 'X'.
  rs_selfield-col_stable = 'X'.
  rs_selfield-row_stable = 'X'.

  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = lv_grid.

  CALL METHOD lv_grid->check_changed_data( ).

  CASE r_ucomm.
    WHEN 'EXCEL'.
      gv = 'E'.
      PERFORM frm_print.
    WHEN 'ZCLICK'.
      gv = 'Z'.
      PERFORM frm_print.
    WHEN '&IC1'.
*      IF rs_selfield-fieldname EQ 'vbeln' AND
*rs_selfield-value IS NOT INITIAL.
*        SET PARAMETER ID 'BES' FIELD rs_selfield-value.
*        CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
*      ENDIF.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_PRINT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_print .


  PERFORM frm_chkprint.

  PERFORM frm_open_print.

  PERFORM frm_loopprint.

  PERFORM frm_ssf_close.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_OPEN_PRINT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_open_print .

  gs_control-no_open = 'X'.
  gs_control-no_close = 'X'.
  gs_option-tdimmed  = 'X'.
  gs_control-no_dialog = 'X'.
  gs_control-getotf = 'X'.
  CALL FUNCTION 'SSF_OPEN'
    EXPORTING
      control_parameters = gs_control
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.

  IF sy-subrc <> 0.
* Implement suitable error handling here
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
           WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_LINE
*&---------------------------------------------------------------------*
*      不足8行补空行
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_line .
  DATA lv_n  TYPE i .
*  lv_n = lines( gt_item ).
*  IF lv_n MOD 6 NE 0 AND lv_n < 6.
*    lv_n = 6 - lv_n MOD 6.
  lv_n = 50.
  DO  lv_n TIMES.
    CLEAR gt_item.
*      gt_item-matnr = ' '.
    gt_item-lfimg = ' '.
    APPEND gt_item.
  ENDDO.

*  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FRM_SSF_CLOSE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_ssf_close .
  DATA: ls_output_info TYPE ssfcrescl,
        bin_size       TYPE i,
        pdf_lines      TYPE TABLE OF tline WITH HEADER LINE,
        fullpath       TYPE string,
        path           TYPE string,
        filename       TYPE string.

  CALL FUNCTION 'SSF_CLOSE'
    IMPORTING
      job_output_info  = ls_output_info
    EXCEPTIONS
      formatting_error = 1
      internal_error   = 2
      send_error       = 3
      OTHERS           = 4.
  IF sy-subrc <> 0.
* Implement suitable error handling here
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
           WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
  IF gv <> 'E'.
    CALL FUNCTION 'CONVERT_OTF'
      EXPORTING
        format       = 'PDF'
      IMPORTING
        bin_filesize = bin_size
      TABLES
        otf          = ls_output_info-otfdata[]
        lines        = pdf_lines.
    IF sy-subrc <> 0.
* Implement suitable error handling here
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
    CALL METHOD cl_gui_frontend_services=>file_save_dialog
      EXPORTING
        default_extension = 'PDF'
        file_filter       = '*.PDF'
      CHANGING
        filename          = filename
        path              = path
        fullpath          = fullpath.

    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        bin_filesize = bin_size
        filename     = fullpath
        filetype     = 'BIN'
        codepage     = '8404'
        ignore_cerr  = abap_true
      TABLES
        data_tab     = pdf_lines.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_CHKDATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM frm_chkdata .
*  CHECK sy-ucomm = 'ONLI'.
*  AUTHORITY-CHECK OBJECT ''
*  ID 'BUKRS' FIELD 'S_bukrs'.
*  IF sy-subrc NE 0.
*    MESSAGE '没有权限' TYPE 'E'.
*    EXIT.
*  ENDIF.
*  IF zmf = 'X' AND zth ='X'.
*    MESSAGE '退货采购订单、免费采购订单，只能选择一个，不能同时勾选' TYPE 'E'.
*  ENDIF.
*ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  FRM_CHKPRINT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_chkprint .
  READ TABLE gt_likp WITH KEY chk = 'X' TRANSPORTING NO FIELDS.
  IF sy-subrc NE 0.
    MESSAGE '请至少选择一行进行打印' TYPE 'E'.
    EXIT.
  ENDIF.
  SORT gt_likp BY vbeln.
*  READ TABLE gt_likp WITH KEY chk = 'X' frgke = 'N' TRANSPORTING NO
*FIELDS.
*  IF sy-subrc EQ 0.
*    MESSAGE '未审批订单不能打印' TYPE 'E'.
*    EXIT.
*  ENDIF.
*
*  READ TABLE gt_likp WITH KEY chk = 'X' frgke = 'X' TRANSPORTING NO
*FIELDS.
*  IF sy-subrc EQ 0.
*    MESSAGE '拒绝订单不能打印' TYPE 'E'.
*    EXIT.
*  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_LOOPPRINT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_loopprint .

  DATA: it_tlines LIKE tline OCCURS 0 WITH HEADER LINE,
        zje       TYPE netwr, zwje TYPE char200, ztt TYPE char10,zyf TYPE netwr,zvbeln TYPE char50.
  DATA lv TYPE int4.
  DATA: lv_vbeln LIKE likp-vbeln,
*        lv_name  TYPE char80,
        kzwi     TYPE p DECIMALS 2,
        lv_kunag LIKE likp-kunag..

  DATA: BEGIN OF lt_likp  OCCURS 0,
          kunag      LIKE likp-kunag,
          vbeln      LIKE likp-vbeln,
          erdat      LIKE likp-erdat,
          name       TYPE char80,
          addr       TYPE char100,
          extension1 LIKE adrc-extension1,
          tel_number LIKE adrc-tel_number,
          fax_number LIKE adrc-fax_number,
          ihrez      LIKE vbkd-ihrez,
          bezei3     LIKE ztsd002-bezei,
          tel        LIKE ztsd002-tel,
          fax        LIKE ztsd002-fax,
          vgbel      LIKE lips-vgbel,
          vgpos      LIKE lips-vgpos,
          waerk      LIKE likp-waerk,
          kbetr      LIKE konv-kbetr,
          ship       TYPE char80,
          shipaddr   TYPE char100,
          kvgr1      LIKE vbak-kvgr1,
        END OF lt_likp.

  DATA: BEGIN OF lt_item OCCURS 0,
          kunag  LIKE likp-kunag,
          vbeln  LIKE likp-vbeln,
          matnr  LIKE lips-matnr,
          vrkme  LIKE lips-vrkme,
          lfimg  LIKE lips-lfimg,
          vgbel  LIKE lips-vgbel,
          vgpos  LIKE lips-vgpos,
          arktx  LIKE vbap-arktx,
          kzwi1  LIKE lips-kzwi1,
          skzwi  TYPE char13,
          kwmeng LIKE vbap-kwmeng,
        END OF lt_item.

  CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
    EXPORTING
      formname           = 'ZSFSD_005'
    IMPORTING
      fm_name            = gv_name
    EXCEPTIONS
      no_form            = 1
      no_function_module = 2
      OTHERS             = 3.

  SORT gt_likp BY kunag.
  LOOP AT gt_likp WHERE chk = 'X'.
    MOVE-CORRESPONDING gt_likp TO lt_likp.
    APPEND lt_likp.
  ENDLOOP.
  DELETE ADJACENT DUPLICATES FROM lt_likp COMPARING  vbeln.

  SORT lt_likp BY kunag.
*  READ TABLE lt_likp INDEX 1.
*  lv_kunag = lt_likp-kunag.

  LOOP AT lt_likp .
    AT NEW  kunag.
      MOVE lt_likp-kunag TO lv_kunag.
      READ TABLE lt_likp WITH KEY kunag = lv_kunag.
      MOVE-CORRESPONDING lt_likp TO gt_head.
      SELECT SINGLE bezei tel fax INTO (gt_head-bezei3,gt_head-tel,gt_head-fax) FROM ztsd002 WHERE kvgr2 = lt_likp-kvgr1.
      SELECT SINGLE inco1 inco2  INTO (gt_head-inco1,gt_head-inco2)  FROM vbkd WHERE vbeln = lt_likp-vbeln .
      CONCATENATE gt_head-inco1 ' ' gt_head-inco2 INTO gt_head-inco SEPARATED BY ' '.
      APPEND gt_head.


      SELECT a~matnr a~lfimg a~vrkme b~kzwi1 b~kwmeng a~vgbel a~arktx c~kunag
      INTO CORRESPONDING FIELDS OF TABLE lt_item
      FROM lips AS a INNER JOIN vbap AS b ON a~vgbel = b~vbeln AND a~vgpos = b~posnr
        INNER JOIN likp AS c ON a~vbeln = c~vbeln
       FOR ALL ENTRIES IN lt_likp
      WHERE a~vbeln = lt_likp-vbeln.

      LOOP AT lt_likp WHERE kunag = lv_kunag.

        zje = zje + lt_likp-kbetr.
        zyf = zyf + lt_likp-kbetr.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = lt_likp-vbeln
          IMPORTING
            output = lv_vbeln.
        CONCATENATE lv_vbeln '/' zvbeln INTO zvbeln.
        AT END OF kunag.
          lv =  strlen( zvbeln ).
          lv = lv - 1.
          zvbeln = zvbeln+0(lv).
        ENDAT.
      ENDLOOP.

*      DATA lv TYPE i.
*    LOOP AT lt_item WHERE vgbel = gt_head-vgbel.
      LOOP AT lt_item WHERE kunag = lt_likp-kunag.
        SELECT SINGLE maktx INTO lt_item-arktx FROM makt WHERE matnr = lt_item-matnr AND spras = 'E'.

        kzwi = lt_item-kzwi1 / lt_item-kwmeng.
        lt_item-kzwi1 = kzwi * lt_item-lfimg.
        zje = zje + lt_item-kzwi1.
*        zje = zje + gt_head-kbetr.
        MOVE kzwi TO lt_item-skzwi.
        SHIFT lt_item-skzwi LEFT DELETING LEADING space.
*      CONCATENATE gt_head-waerk lt_item-skzwi INTO lt_item-skzwi.
        MODIFY lt_item.
        MOVE-CORRESPONDING lt_item TO gt_item.
        COLLECT gt_item.
*      APPEND gt_item.

        CLEAR: kzwi.
      ENDLOOP.

      CALL FUNCTION 'Z_CONVERT_NUMERIC_TO_ENGLISH'
        EXPORTING
          i_amt      = zje
          i_waers    = lt_likp-waerk
        IMPORTING
          e_saywords = zwje.
      IF gv = 'E'.
        PERFORM frm_toexcel USING zje zwje zyf zvbeln.
      ELSE.

        CALL FUNCTION gv_name
          EXPORTING
            control_parameters = gs_control
            zje                = zje
            zwje               = zwje
            zyf                = zyf
            zvbeln             = zvbeln
          EXCEPTIONS
            formatting_error   = 1
            internal_error     = 2
            send_error         = 3
            user_canceled      = 4
            OTHERS             = 5.
        IF sy-subrc <> 0.
* Implement suitable error handling here
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
      ENDIF.
    ENDAT.

*    PERFORM frm_addprintsum.
    CLEAR: zje,zwje,lv,zvbeln.

    REFRESH :gt_head,gt_item,lt_item.
*    ENDAT.
  ENDLOOP.
ENDFORM.

FORM frm_addprintsum .
  DATA wa LIKE TABLE OF zprintnum WITH HEADER LINE.
  wa-zpo = gt_head-vbeln.
  wa-mandt = sy-mandt.
  wa-zprgname = 'ZSD005'.
  wa-zernam = sy-uname.
  wa-zdate = sy-datum.
  wa-ztime = sy-uzeit.

  SELECT SINGLE * FROM zprintnum WHERE zpo = wa-zpo AND zprgname = 'ZSD005'.
  IF sy-subrc EQ 0.
    .
    UPDATE zprintnum SET
     zernam = @sy-uname,
     zdate = @sy-datum,
     ztime = @sy-uzeit,
     zsum = zsum + 1
     WHERE zpo = @wa-zpo
  .
  ELSE.
    wa-zsum = 1.
    INSERT INTO zprintnum VALUES @wa.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_CHECK_AUTH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_check_auth .
  CHECK sy-ucomm = 'ONLI'.

  AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
           ID 'VKORG' FIELD s_vkorg
           ID 'VTWEG' DUMMY
           ID 'SPART' DUMMY
           ID 'ACTVT' FIELD '03'.
  IF sy-subrc <> 0.
    MESSAGE '没有销售组织的权限' TYPE 'E'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_TOEXCEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ZJE  text
*      -->P_ZWJE  text
*      -->P_ZYF  text
*      -->P_ZVBELN  text
*----------------------------------------------------------------------*
FORM frm_toexcel  USING    p_zje
                           p_zwje
                           p_zyf
                           p_zvbeln.
  DATA:ls_key   TYPE wwwdatatab,
       lv_subrc TYPE sy-subrc.
  DATA:lv_line TYPE i,
       lv_num  TYPE i.
  DATA: fullpath    TYPE string,
        filename    TYPE string,
        path        TYPE string,
        user_action TYPE i,
        encoding    TYPE abap_encoding.
  DATA lv TYPE char200.
  CALL METHOD cl_gui_frontend_services=>file_save_dialog
    EXPORTING
      window_title      = '下载到本地文件'
      default_extension = 'XLSX'           "缺省文件类型
      default_file_name = 'CI.XLSX'
      file_filter       = 'Excel 文件 (*.XLS)|*.XLS;*.XLSX|'
      with_encoding     = 'X'
      initial_directory = 'D:\'
    CHANGING
      filename          = filename    "获得用户输入文件名
      path              = path        "获得用户所选路径
      fullpath          = fullpath    "路径加文件名
      user_action       = user_action
      file_encoding     = encoding.

  MOVE fullpath TO lv_file.

  ls_key-relid = 'MI'.
  ls_key-objid = gcst_excel_template.
  CALL FUNCTION 'DOWNLOAD_WEB_OBJECT'
    EXPORTING
      key         = ls_key
      destination = lv_file
    IMPORTING
      rc          = lv_subrc.
  IF lv_subrc <> 0.
    MESSAGE '下载模板出错，请检查，谢谢' TYPE 'E'.
    EXIT.
  ENDIF.
  CREATE OBJECT lo_excel 'EXCEL.APPLICATION'.
  CALL METHOD OF lo_excel 'WORKBOOKS' = lo_workbooks.

  CALL METHOD OF lo_workbooks 'OPEN' = lo_workbook EXPORTING #1 = lv_file.
  CALL METHOD OF lo_workbook 'WORKSHEETS' = lo_sheet EXPORTING #1 = 1.

  SORT gt_item BY matnr.

  DESCRIBE TABLE gt_item LINES lv_line.
  lv_line = lv_line - 3.
  IF lv_line > 0.
    DO lv_line TIMES.
      CALL METHOD OF lo_sheet 'Rows' = lo_range EXPORTING #1 = 21.
      CALL METHOD OF lo_range 'Copy'. "COPY第21行插入一个新行
      CALL METHOD OF lo_sheet 'Rows' = lo_range EXPORTING #1 = 22.
      CALL METHOD OF lo_range 'Insert'.
      CALL METHOD OF lo_range 'ClearContents'. "是否需要清空Cell
    ENDDO.
  ENDIF.
  IF lv_line < 0.
    lv_line = 0.
  ENDIF.
  READ TABLE gt_head INDEX 1.
  lv_row = 6.
  mac_fill_cell  lv_row  'B'  gt_head-name.
  lv_row = 7.
  mac_fill_cell  lv_row  'B'  gt_head-addr.
  lv_row = lv_row + 2.
  mac_fill_cell  lv_row  'B'  gt_head-ship.
  lv_row = lv_row + 1.
  mac_fill_cell  lv_row  'B'  gt_head-shipaddr.
  lv_row = lv_row + 2.
  mac_fill_cell  lv_row  'B'  gt_head-tel_number.
  mac_fill_cell  lv_row  'E'  gt_head-tel.
  lv_row = lv_row + 1.
  mac_fill_cell  lv_row  'B'  gt_head-fax_number.
  mac_fill_cell  lv_row  'E'  gt_head-fax.
  lv_row = lv_row + 1.
  mac_fill_cell  lv_row  'B'  gt_head-extension1.
  mac_fill_cell  lv_row  'E'  gt_head-bezei3.

  lv_row = 18 .
  mac_fill_cell  lv_row  'B'  p_zvbeln.
  mac_fill_cell  lv_row  'F'  gt_head-erdat.

  lv_row = lv_row + 2.
  CONCATENATE 'Unit Price (' gt_head-waerk ')'INTO lv.
  mac_fill_cell  lv_row  'D'  lv.
  CONCATENATE 'Amount          (' gt_head-waerk ')'INTO lv.
  mac_fill_cell  lv_row  'F'  lv.
  lv_row = 21 .
  LOOP AT gt_item.
    mac_fill_cell  lv_row  'A'  gt_item-arktx.

    mac_fill_cell  lv_row  'D'  gt_item-skzwi.
    lv = gt_item-lfimg .
    mac_fill_cell  lv_row  'E'  lv.
    lv = gt_item-kzwi1 .
    mac_fill_cell  lv_row  'F'  lv.
    lv_row = lv_row + 1.
  ENDLOOP.
  lv_row = 24 + lv_line.
  mac_fill_cell  lv_row  'F'  p_zyf.
  lv_row = lv_row + 1.
  mac_fill_cell  lv_row  'F'  p_zje.
  lv_row = lv_row + 1.
  CONCATENATE 'Total Sum:' p_zwje INTO lv.
  mac_fill_cell  lv_row  'A' lv .
  lv_row = 29 + lv_line.
  mac_fill_cell  lv_row  'D' gt_head-bezei3 .

  CALL METHOD OF lo_sheet 'CELLS' = lo_cell EXPORTING #1 = 1 #2 = 1.
  CALL METHOD OF lo_cell 'SELECT'.
  SET PROPERTY OF lo_excel 'CutCopyMode' = 0.

  CALL METHOD OF lo_workbook 'SAVE'.
  SET PROPERTY OF lo_excel 'VISIBLE' = 1.
ENDFORM.
