*&---------------------------------------------------------------------*
*&  包含                ZRPPP003F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_data .
  DATA: BEGIN OF alv_ltb OCCURS 0.
      INCLUDE STRUCTURE stpov_alv.
  DATA: info(3) TYPE c,
        END OF alv_ltb.
  DATA:BEGIN OF lt_mara OCCURS 0,
         matnr LIKE mara-matnr,
         mtart LIKE mara-mtart,
       END OF lt_mara.
***抓取满足条件的物料数据
  SELECT  a~matnr
          a~werks
          b~mtart
          a~dispo
          a~maabc
    INTO CORRESPONDING FIELDS OF TABLE gt_out
    FROM marc AS a
    INNER JOIN mara AS b
    ON a~matnr = b~matnr
   WHERE a~matnr IN s_matnr
     AND a~werks IN s_werks
     AND a~dispo IN s_dispo
     AND a~dismm NE space
     AND b~mtart IN ('Z001','Z002').

  LOOP AT gt_out.
    SUBMIT zrcs15001 WITH pm_idnrk = gt_out-matnr
                     WITH pm_werks = gt_out-werks
                     WITH pm_stlan = '1'
                     WITH pm_dirkt = 'X'
                     WITH pm_mehrs = 'X'
                     WITH pm_mattp = 'X' AND RETURN.
    IMPORT alv_ltb = alv_ltb FROM MEMORY ID 'ZRCS15001'.
    FREE MEMORY ID 'ZRCS15001'.
    REFRESH lt_mara.
    IF alv_ltb[] IS NOT INITIAL.
      SELECT matnr mtart
        INTO CORRESPONDING FIELDS OF TABLE lt_mara
        FROM mara
        FOR ALL ENTRIES IN alv_ltb
        WHERE matnr = alv_ltb-matnr
          AND mtart = 'Z003'.
      IF lines( lt_mara ) > 1.
        gt_out-maabc_n = 'H'.
      ELSEIF lines( lt_mara ) = 1.
        gt_out-maabc_n = 'G'.
      ENDIF.
      MODIFY gt_out.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_CHANGE_ABC_INDICATOR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_change_abc_indicator .
  DATA:ls_headdata   LIKE bapimathead,
       ls_plantdata  LIKE bapi_marc,
       ls_plantdatax LIKE bapi_marcx.
  DATA:lt_return LIKE bapi_matreturn2 OCCURS 0 WITH HEADER LINE.
  DATA:lv_msg TYPE string.

  LOOP AT gt_out.
    IF gt_out-maabc_n IS INITIAL OR gt_out-maabc_n = gt_out-maabc.
      gt_out-zicon = icon_led_yellow.
      gt_out-zmsg = '无需更新'.
    ELSE.
      CLEAR:ls_headdata,ls_plantdata,ls_plantdatax,lt_return.
      REFRESH lt_return.
      ls_headdata-material = gt_out-matnr.
      ls_headdata-mrp_view = 'X'.
      ls_plantdata-plant = gt_out-werks.
      ls_plantdata-abc_id = gt_out-maabc_n.
      ls_plantdatax-plant = gt_out-werks.
      ls_plantdatax-abc_id = 'X'.
      CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
        EXPORTING
          headdata       = ls_headdata
          plantdata      = ls_plantdata
          plantdatax     = ls_plantdatax
        TABLES
          returnmessages = lt_return.
      LOOP AT lt_return WHERE type = 'E' OR type = 'A'.
        EXIT.
      ENDLOOP.
      IF sy-subrc = 0.
        gt_out-zicon = icon_led_red.
        LOOP AT lt_return WHERE type = 'E' OR type = 'A'.
          IF lt_return-message IS NOT INITIAL.
            gt_out-zmsg = gt_out-zmsg && lt_return-message.
          ELSE.
            CLEAR:lv_msg.
            CALL FUNCTION 'MESSAGE_TEXT_BUILD'
              EXPORTING
                msgid               = lt_return-id
                msgnr               = lt_return-number
                msgv1               = lt_return-message_v1
                msgv2               = lt_return-message_v2
                msgv3               = lt_return-message_v3
                msgv4               = lt_return-message_v4
              IMPORTING
                message_text_output = lv_msg.
            gt_out-zmsg = gt_out-zmsg && lv_msg.
          ENDIF.
          CONDENSE gt_out-zmsg.
        ENDLOOP.
      ELSE.
        gt_out-zicon = icon_led_green.
        gt_out-zmsg = '更新成功'.
      ENDIF.
    ENDIF.
    MODIFY gt_out.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_fieldcat .
  mcr_build_fieldcat:'ZICON'   '状态'            ''          ''          'C'    '10',
                     'MATNR'   '物料号码'        'MATNR'     'MARC'      ''     '',
                     'WERKS'   '工厂'            'WERKS'     'MARC'      ''     '',
                     'MTART'   '物料类型'        'MTART'     'MARA'      ''     '',
                     'DISPO'   'MRP控制者'       'DISPO'     'MARC'      ''     '',
                     'MAABC'   'ABC标识(旧)'     'MAABC'     'MARC'      ''     '',
                     'MAABC_N' 'ABC标识(新)'     'MAABC'     'MARC'      ''     '',
                     'ZMSG'    '消息'            ''          ''          'C'    '220'.

  gs_layout-cwidth_opt = 'X'.
  gs_layout-zebra = 'X'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_OUTPUT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_output_data .
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
*     I_INTERFACE_CHECK  = ' '
*     I_BYPASSING_BUFFER =
*     I_BUFFER_ACTIVE    =
      i_callback_program = sy-repid
*     I_CALLBACK_PF_STATUS_SET          = ' '
*     I_CALLBACK_USER_COMMAND           = ' '
*     I_CALLBACK_TOP_OF_PAGE            = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME   =
*     I_BACKGROUND_ID    = ' '
*     I_GRID_TITLE       =
*     I_GRID_SETTINGS    =
      is_layout_lvc      = gs_layout
      it_fieldcat_lvc    = gt_fcat[]
*     IT_EXCLUDING       =
*     IT_SPECIAL_GROUPS_LVC             =
*     IT_SORT_LVC        =
*     IT_FILTER_LVC      =
*     IT_HYPERLINK       =
*     IS_SEL_HIDE        =
      i_default          = 'X'
      i_save             = 'A'
*     IS_VARIANT         =
*     IT_EVENTS          =
*     IT_EVENT_EXIT      =
*     IS_PRINT_LVC       =
*     IS_REPREP_ID_LVC   =
*     I_SCREEN_START_COLUMN             = 0
*     I_SCREEN_START_LINE               = 0
*     I_SCREEN_END_COLUMN               = 0
*     I_SCREEN_END_LINE  = 0
*     I_HTML_HEIGHT_TOP  =
*     I_HTML_HEIGHT_END  =
*     IT_ALV_GRAPHICS    =
*     IT_EXCEPT_QINFO_LVC               =
*     IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*     E_EXIT_CAUSED_BY_CALLER           =
*     ES_EXIT_CAUSED_BY_USER            =
    TABLES
      t_outtab           = gt_out[]
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
