*&---------------------------------------------------------------------*
*&  包含                ZRPQM008F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_data .
  DATA:BEGIN OF lt_makt OCCURS 0,
         matnr LIKE mara-matnr,
         maktx LIKE makt-maktx,
       END OF lt_makt.

  DATA:BEGIN OF lt_qmfe OCCURS 0,
         qmnum     LIKE qmfe-qmnum,
         fenum     LIKE qmfe-fenum,
         anzfehler LIKE qmfe-anzfehler,
         prueflos  LIKE qmel-prueflos,
         pnlkn     LIKE qmfe-pnlkn,
       END OF lt_qmfe.

  DATA:BEGIN OF lt_qapo OCCURS 0,
         prueflos LIKE qals-prueflos,
         aufpl    LIKE v_qapo-aufpl,
         vorglfnr LIKE v_qapo-vorglfnr,
         vornr    LIKE v_qapo-vornr,
         vorktxt  LIKE v_qapo-vorktxt,
       END OF lt_qapo.

  DATA:lv_sttxt LIKE bsvx-sttxt.

  IF s_dauat[] IS INITIAL.
    SELECT a~erdat
           a~qmnum
           a~prueflos
           a~fertaufnr
           a~matnr
           a~rkmng
           a~revlv
           a~objnr
           b~auart AS dauat
      INTO CORRESPONDING FIELDS OF TABLE gt_out
      FROM qmel AS a
      LEFT JOIN aufk AS b
      ON a~fertaufnr = b~aufnr
      WHERE a~erdat IN s_erdat
        AND a~qmnum IN s_qmnum
        AND a~matnr IN s_matnr
        AND a~qmart EQ 'Z2'.
  ELSE.
    SELECT a~erdat
           a~qmnum
           a~prueflos
           a~fertaufnr
           a~matnr
           a~rkmng
           a~revlv
           a~objnr
           b~auart AS dauat
    INTO CORRESPONDING FIELDS OF TABLE gt_out
    FROM qmel AS a
     INNER JOIN aufk AS b
      ON a~fertaufnr = b~aufnr
    WHERE a~erdat IN s_erdat
      AND a~qmnum IN s_qmnum
      AND a~matnr IN s_matnr
      AND b~auart IN s_dauat
      AND a~qmart EQ 'Z2'.
  ENDIF.

***check 通知单状态
  LOOP AT gt_out.
    CLEAR lv_sttxt.
    CALL FUNCTION 'STATUS_TEXT_EDIT'
      EXPORTING
        client           = sy-mandt
        objnr            = gt_out-objnr
        only_active      = 'X'
        spras            = sy-langu
      IMPORTING
        line             = lv_sttxt
      EXCEPTIONS
        object_not_found = 1
        OTHERS           = 2.
    IF lv_sttxt CS 'OSNO'.
      DELETE gt_out.
    ENDIF.
  ENDLOOP.

  CHECK gt_out[] IS NOT INITIAL.
***抓取物料描述
  SELECT matnr
         maktx
    INTO CORRESPONDING FIELDS OF TABLE lt_makt
    FROM makt
    FOR ALL ENTRIES IN gt_out
    WHERE matnr = gt_out-matnr
      AND spras = sy-langu.

***抓取缺陷信息
  SELECT a~qmnum
         a~fenum
         a~anzfehler
         a~pnlkn
         b~prueflos
    INTO CORRESPONDING FIELDS OF TABLE lt_qmfe
    FROM qmfe AS a
    INNER JOIN qmel AS b
    ON a~qmnum = b~qmnum
    FOR ALL ENTRIES IN gt_out
    WHERE a~qmnum = gt_out-qmnum.

***工序及名称
  IF lt_qmfe[] IS NOT INITIAL.
    SELECT a~prueflos
           b~aufpl
           b~vorglfnr
           b~vornr
           b~vorktxt
      INTO CORRESPONDING FIELDS OF TABLE lt_qapo
      FROM qals AS a
      INNER JOIN v_qapo AS b
      ON a~aufpl = b~aufpl
      FOR ALL ENTRIES IN lt_qmfe
      WHERE a~prueflos = lt_qmfe-prueflos
        AND b~vorglfnr = lt_qmfe-pnlkn.
  ENDIF.

  SORT lt_makt BY matnr.
  SORT lt_qapo BY prueflos.

***连接到BPM数据库，需要从对方数据库读取数据
  EXEC SQL.
    CONNECT TO :CNS_BPM
  ENDEXEC.

  LOOP AT gt_out.
***物料描述
    READ TABLE lt_makt WITH KEY matnr = gt_out-matnr BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-maktx = lt_makt-maktx.
    ENDIF.
***产品组
    SELECT SINGLE b~vtext INTO gt_out-vtext FROM mara AS a INNER JOIN tspat AS b ON a~spart = b~spart WHERE a~matnr = gt_out-matnr AND spras = sy-langu.
***订单类型
    IF gt_out-fertaufnr IS NOT INITIAL.
      SELECT SINGLE auart INTO gt_out-dauat FROM aufk WHERE aufnr = gt_out-fertaufnr.
    ENDIF.
***获取产品分类信息
    PERFORM frm_get_class_data.
***检验批数量
    SELECT SINGLE LOSMENGE INTO gt_out-LOSMENGE FROM qals WHERE prueflos = gt_out-prueflos.
***工序 & 描述
    READ TABLE lt_qapo WITH KEY prueflos = gt_out-prueflos BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-vornr = lt_qapo-vornr.
      gt_out-vorktxt = lt_qapo-vorktxt.
    ENDIF.
***不良数
    LOOP AT lt_qmfe WHERE qmnum = gt_out-qmnum.
      gt_out-zbls = gt_out-zbls + lt_qmfe-anzfehler.
    ENDLOOP.
***不良率
    IF gt_out-RKmng NE 0.
      gt_out-zblv = gt_out-zbls / gt_out-RKmng * 100.
    ENDIF.
***异常问题描述
    PERFORM frm_get_text CHANGING gt_out-zycwt.
***BPM相关数据
    TRY.
        EXEC SQL.
          SELECT STATUS,
                 EXPACCEPT_APR,
                 EXPACCEPT_JUDGE,
                 EXPACCEPT_INPRO,
                 EXPHAND_CORRECT,
                 EXPHAND_PREVENT,
                 QAIMPROV_CHK
            INTO :GT_OUT-STATUS,
                 :GT_OUT-EXPACCEPT_APR,
                 :GT_OUT-EXPACCEPT_JUDGE,
                 :GT_OUT-EXPACCEPT_INPRO,
                 :GT_OUT-EXPHAND_CORRECT,
                 :GT_OUT-EXPHAND_PREVENT,
                 :GT_OUT-QAIMPROV_CHK
            FROM ZLSPT_QM_PRDEXP
            WHERE QMNUM = :GT_OUT-QMNUM
        ENDEXEC.
    ENDTRY.
    CASE gt_out-status.
      WHEN '01'.
        gt_out-status = '已保存'.
      WHEN '02'.
        gt_out-status = '审批中'.
      WHEN '03'.
        gt_out-status = '已审批'.
      WHEN '04'.
        gt_out-status = '已取消'.
      WHEN '06'.
        gt_out-status = '已退回'.
      WHEN OTHERS.
    ENDCASE.
    MODIFY gt_out.
  ENDLOOP.
**关闭连接
  EXEC SQL.
    DISCONNECT :CNS_BPM
  ENDEXEC.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_CLASS_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_class_data .
  DATA:lv_object LIKE ausp-objek.
  DATA:lt_class      LIKE sclass OCCURS 0 WITH HEADER LINE,
       lt_objectdata LIKE clobjdat OCCURS 0 WITH HEADER LINE.

  lv_object = gt_out-matnr.
  CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS'
    EXPORTING
*     CLASS              = ' '
*     CLASSTEXT          = 'X'
      classtype          = '001'
*     CLINT              = 0
*     FEATURES           = 'X'
      language           = sy-langu
      object             = lv_object
      objecttable        = 'MARA'
      key_date           = sy-datum
      initial_charact    = space
    TABLES
      t_class            = lt_class
      t_objectdata       = lt_objectdata
    EXCEPTIONS
      no_classification  = 1
      no_classtypes      = 2
      invalid_class_type = 3
      OTHERS             = 4.

  LOOP AT lt_objectdata.
    CASE lt_objectdata-atnam.
      WHEN 'ZFER_CPX'.    "产品线
        gt_out-zline     = lt_objectdata-ausp1.
      WHEN 'ZFER_XL'.     "产品系列
        gt_out-zcpxl     = lt_objectdata-ausp1.
      WHEN 'ZFER_ZXL'.    "子系列
        gt_out-zcpxl_sub = lt_objectdata-ausp1.
      WHEN 'ZFER_DYZXH'.  "主型号
        gt_out-zcpxh_m   = lt_objectdata-ausp1.
      WHEN 'ZFER_CPMC'.   "产品名称
        gt_out-zcpmc     = lt_objectdata-ausp1.
      WHEN 'ZFER_CPXH'.   "产品型号
        gt_out-zcpxh     = lt_objectdata-ausp1.
      WHEN OTHERS.
    ENDCASE.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_TEXT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GT_OUT_ZYCWT  text
*----------------------------------------------------------------------*
FORM frm_get_text  CHANGING c_text TYPE c.
  DATA:lv_name LIKE thead-tdname.
  DATA:lt_lines LIKE tline OCCURS 0 WITH HEADER LINE.

  REFRESH: lt_lines.
  CLEAR: c_text.

  lv_name = gt_out-qmnum.
  CALL FUNCTION 'READ_TEXT'
    EXPORTING
      client                  = sy-mandt
      id                      = 'LTQM'
      language                = sy-langu
      name                    = lv_name
      object                  = 'QMEL'
    TABLES
      lines                   = lt_lines
    EXCEPTIONS
      id                      = 1
      language                = 2
      name                    = 3
      not_found               = 4
      object                  = 5
      reference_check         = 6
      wrong_access_to_archive = 7
      OTHERS                  = 8.

  DELETE lt_lines WHERE tdline IS INITIAL.
  LOOP AT lt_lines.
    IF c_text IS INITIAL.
      c_text = lt_lines-tdline.
    ELSE.
      CONCATENATE c_text lt_lines-tdline INTO c_text.
    ENDIF.
    CONDENSE c_text.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_fieldcat .
  mcr_build_fieldcat:'ERDAT'             '日期'                 'ERDAT'       'QMUR'     ''       '',
                     'QMNUM'             '单据编号'             'QMNUM'       'QMEL'     ''       '',
                     'STATUS'            '审批状态'             ''            ''         'C'      '10',
                     'FERTAUFNR'         '生产订单号'           'FERTAUFNR'   'QMEL'     ''       '',
                     'DAUAT'             '订单类型'             'DAUAT'       'AFPO'     ''       '',
                     'VTEXT'             '产品组'               'VTEXT'       'TSPAT'    ''       '',
                     'ZLINE'             '产品线'               ''            ''         'C'      '30',
                     'ZCPXL'             '产品系列'             ''            ''         'C'      '30',
                     'ZCPXL_SUB'         '产品子系列'           ''            ''         'C'      '30',
                     'ZCPXH_M'           '产品主型号'           ''            ''         'C'      '30',
                     'ZCPMC'             '产品名称'             ''            ''         'C'      '30',
                     'ZCPXH'             '产品型号'             ''            ''         'C'      '30',
                     'MATNR'             '物料编码'             'MATNR'       'QMEL'     ''       '',
                     'MAKTX'             '物料名称'             'MAKTX'       'MAKT'     ''       '',
                     'REVLV'             'SAP版本'              'REVLV'       'AEOI'     ''       '',
                     'VORNR'             '工序'                 'VORNR'       'V_QAPO'   ''       '',
                     'VORKTXT'           '工序描述'             'VORKTXT'     'V_QAPO'   ''       '',
                     'LOSMENGE'          '检验批数量'           'LOSMENGE'    'QALS'     ''       '',
                     'ZBLS'              '不良数'               ''            ''         'I'      '10',
                     'RKMNG'             '已生产总数'           'RKMNG'       'QMEL'     ''       '',
                     'ZBLV'              '不良率%'              ''            ''         'P'      '15',
                     'ZYCWT'             '异常问题'             ''            ''         'C'      '500',
                     'EXPACCEPT_APR'     '异常受理分析'         ''            ''         'C'      '600',
                     'EXPACCEPT_JUDGE'   '问题判定'             ''            ''         'C'      '10',
                     'EXPACCEPT_INPRO'   '在制品处理'           ''            ''         'C'      '600',
                     'EXPHAND_CORRECT'   '纠正措施'             ''            ''         'C'      '600',
                     'EXPHAND_PREVENT'   '预防措施'             ''            ''         'C'      '600',
                     'QAIMPROV_CHK'      '效果跟进'             ''            ''         'C'      '600'.

  gs_layout-cwidth_opt = 'X'.
  gs_layout-zebra = 'X'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_OUTPUT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_output_data .
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
*     I_INTERFACE_CHECK  = ' '
*     I_BYPASSING_BUFFER =
*     I_BUFFER_ACTIVE    =
      I_CALLBACK_PROGRAM = sy-repid
*     I_CALLBACK_PF_STATUS_SET          = ' '
*     I_CALLBACK_USER_COMMAND           = ' '
*     I_CALLBACK_TOP_OF_PAGE            = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME   =
*     I_BACKGROUND_ID    = ' '
*     I_GRID_TITLE       =
*     I_GRID_SETTINGS    =
      IS_LAYOUT_LVC      = gs_layout
      IT_FIELDCAT_LVC    = gt_fcat[]
*     IT_EXCLUDING       =
*     IT_SPECIAL_GROUPS_LVC             =
*     IT_SORT_LVC        =
*     IT_FILTER_LVC      =
*     IT_HYPERLINK       =
*     IS_SEL_HIDE        =
      I_DEFAULT          = 'X'
      I_SAVE             = 'A'
*     IS_VARIANT         =
*     IT_EVENTS          =
*     IT_EVENT_EXIT      =
*     IS_PRINT_LVC       =
*     IS_REPREP_ID_LVC   =
*     I_SCREEN_START_COLUMN             = 0
*     I_SCREEN_START_LINE               = 0
*     I_SCREEN_END_COLUMN               = 0
*     I_SCREEN_END_LINE  = 0
*     I_HTML_HEIGHT_TOP  =
*     I_HTML_HEIGHT_END  =
*     IT_ALV_GRAPHICS    =
*     IT_EXCEPT_QINFO_LVC               =
*     IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*     E_EXIT_CAUSED_BY_CALLER           =
*     ES_EXIT_CAUSED_BY_USER            =
    TABLES
      t_outtab           = gt_out[]
    EXCEPTIONS
      PROGRAM_ERROR      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
