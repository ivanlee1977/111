*&---------------------------------------------------------------------*
*&  包含                ZRPMM024F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_data .
  DATA:BEGIN OF lt_lfa1 OCCURS 0,
         lifnr LIKE lfa1-lifnr,
         name1 LIKE lfa1-name1,
       END OF lt_lfa1.
  DATA:BEGIN OF lt_makt OCCURS 0,
         matnr LIKE makt-matnr,
         maktx LIKE makt-maktx,
       END OF lt_makt.
  DATA:lt_a017 LIKE a017 OCCURS 0 WITH HEADER LINE,
       lt_konm LIKE konm OCCURS 0 WITH HEADER LINE,
       lt_konp LIKE konp OCCURS 0 WITH HEADER LINE.
  DATA:lv_index TYPE i.
***抓取满足条件的数据
  SELECT a~lifnr
         b~werks
         a~matnr
         b~ekorg
         b~esokz
         b~mwskz
         b~minbm
         a~meins
         b~peinh
         B~BPUMN
         B~BPUMZ
    INTO CORRESPONDING FIELDS OF TABLE gt_out
    FROM eina AS a
    INNER JOIN eine AS b
    ON a~infnr = b~infnr
    WHERE b~ekorg = p_ekorg
      AND a~matnr IN s_matnr
      AND b~ekgrp IN s_ekgrp
      AND a~lifnr IN s_lifnr
      AND b~esokz IN s_esokz
      AND b~loekz EQ space
      AND a~loekz EQ space.

  CHECK gt_out[] IS NOT INITIAL.
***供应商名称
  SELECT lifnr name1
    INTO CORRESPONDING FIELDS OF TABLE lt_lfa1
    FROM lfa1
    FOR ALL ENTRIES IN gt_out
    WHERE lifnr = gt_out-lifnr.
***抓取物料描述
  SELECT matnr maktx
    INTO CORRESPONDING FIELDS OF TABLE lt_makt
    FROM makt
    FOR ALL ENTRIES IN gt_out
    WHERE matnr = gt_out-matnr
     AND spras = sy-langu.
***获取A018数据
  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_a017
    FROM a017
    FOR ALL ENTRIES IN gt_out
    WHERE kschl = 'PB00'
      AND lifnr = gt_out-lifnr
      AND matnr = gt_out-matnr
      AND ekorg = gt_out-ekorg
      AND esokz = gt_out-esokz
      AND datbi >= sy-datum
      AND datab <= sy-datum.
  IF lt_a017[] IS NOT INITIAL.
    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE lt_konp
      FROM konp
      FOR ALL ENTRIES IN lt_a017
      WHERE knumh = lt_a017-knumh
        AND kschl = 'PB00'
        AND loevm_ko EQ space.
    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE lt_konm
      FROM konm
      FOR ALL ENTRIES IN lt_a017
      WHERE knumh = lt_a017-knumh.
  ENDIF.
***整理数据到输出表
  SORT lt_lfa1 BY lifnr.
  SORT lt_makt BY matnr.
  SORT lt_konp BY knumh.
  SORT lt_a017 BY matnr lifnr werks ekorg.
  SORT lt_konm.
  LOOP AT gt_out.
***供应商名称
    READ TABLE lt_lfa1 WITH KEY lifnr = gt_out-lifnr BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-name1 = lt_lfa1-name1.
    ENDIF.
***物料描述
    READ TABLE lt_makt WITH KEY matnr = gt_out-matnr BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-maktx = lt_makt-maktx.
    ENDIF.
    READ TABLE lt_a017 WITH KEY matnr = gt_out-matnr lifnr = gt_out-lifnr werks = gt_out-werks ekorg = gt_out-ekorg BINARY SEARCH.
    IF sy-subrc = 0.
      READ TABLE lt_konm WITH KEY knumh = lt_a017-knumh.
      IF sy-subrc = 0.
        CLEAR lv_index.
        LOOP AT lt_konm where knumh = lt_a017-knumh.
          lv_index = lv_index + 1.
          CASE lv_index .
            WHEN 1.
              gt_out-netpr1 = lt_konm-kbetr / GT_OUT-BPUMZ * GT_OUT-BPUMN.
            WHEN 2.
              gt_out-netpr2 = lt_konm-kbetr / GT_OUT-BPUMZ * GT_OUT-BPUMN.
            WHEN 3.
              gt_out-netpr3 = lt_konm-kbetr / GT_OUT-BPUMZ * GT_OUT-BPUMN.
            WHEN 4.
              gt_out-netpr4 = lt_konm-kbetr / GT_OUT-BPUMZ * GT_OUT-BPUMN.
            WHEN 5.
              gt_out-netpr5 = lt_konm-kbetr / GT_OUT-BPUMZ * GT_OUT-BPUMN.
            WHEN OTHERS.
              EXIT.
          ENDCASE.
        ENDLOOP.
      ELSE.
        READ TABLE lt_konp WITH KEY knumh = lt_a017-knumh.
        IF sy-subrc = 0.
          gt_out-netpr1 = lt_konp-kbetr / GT_OUT-BPUMZ * GT_OUT-BPUMN.
        ENDIF.
      ENDIF.
    ENDIF.
    MODIFY gt_out.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_fieldcat .
  mcr_build_fieldcat:'LIFNR'  '供应商号码'    'LIFNR'    'EINA',
                     'NAME1'  '供应商名称'    'NAME1'    'LFA1',
                     'WERKS'  '工厂'          'WERKS'    'EINE',
                     'MATNR'  '物料号码'      'MATNR'    'EINA',
                     'MAKTX'  '物料描述'      'MAKTX'    'MAKT',
                     'EKORG'  '采购组织'      'EKORG'    'EINE',
                     'ESOKZ'  '信息记录类型'  'ESOKZ'    'EINE',
                     'MWSKZ'  '税码'          'MWSKZ'    'EINE',
                     'MINBM'  '最小订单数量'  'MINBM'    'EINE',
                     'MEINS'  '单位'          'MEINS'    'EINA',
                     'PEINH'  '价格单位'      'PEINH'    'EINE',
                     'NETPR1' '<1K价格'       'NETPR'    'EINE',
                     'NETPR2' '1--3K价格'     'NETPR'    'EINE',
                     'NETPR3' '3--5K价格'     'NETPR'    'EINE',
                     'NETPR4' '5--10K价格'    'NETPR'    'EINE',
                     'NETPR5' '10--20K价格'    'NETPR'    'EINE'.

  gs_layout-cwidth_opt = 'X'.
  gs_layout-zebra = 'X'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_OUTPUT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_output_data .
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
*     I_INTERFACE_CHECK  = ' '
*     I_BYPASSING_BUFFER =
*     I_BUFFER_ACTIVE    =
      i_callback_program = sy-repid
*     I_CALLBACK_PF_STATUS_SET          = ' '
*     I_CALLBACK_USER_COMMAND           = ' '
*     I_CALLBACK_TOP_OF_PAGE            = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME   =
*     I_BACKGROUND_ID    = ' '
*     I_GRID_TITLE       =
*     I_GRID_SETTINGS    =
      is_layout_lvc      = gs_layout
      it_fieldcat_lvc    = gt_fcat[]
*     IT_EXCLUDING       =
*     IT_SPECIAL_GROUPS_LVC             =
*     IT_SORT_LVC        =
*     IT_FILTER_LVC      =
*     IT_HYPERLINK       =
*     IS_SEL_HIDE        =
      i_default          = 'X'
      i_save             = 'A'
*     IS_VARIANT         =
*     IT_EVENTS          =
*     IT_EVENT_EXIT      =
*     IS_PRINT_LVC       =
*     IS_REPREP_ID_LVC   =
*     I_SCREEN_START_COLUMN             = 0
*     I_SCREEN_START_LINE               = 0
*     I_SCREEN_END_COLUMN               = 0
*     I_SCREEN_END_LINE  = 0
*     I_HTML_HEIGHT_TOP  =
*     I_HTML_HEIGHT_END  =
*     IT_ALV_GRAPHICS    =
*     IT_EXCEPT_QINFO_LVC               =
*     IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*     E_EXIT_CAUSED_BY_CALLER           =
*     ES_EXIT_CAUSED_BY_USER            =
    TABLES
      t_outtab           = gt_out[]
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
