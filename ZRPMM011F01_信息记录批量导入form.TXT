*&---------------------------------------------------------------------*
*&  包含                ZRPMM011F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  FRM_INITIAL_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_initial_data .
*******数据定义*******
  INCLUDE <icon>.
  DATA ls_functxt TYPE smp_dyntxt.
  DATA:gt_exbut TYPE TABLE OF sy-ucomm.
*******初始化*******
*******程序主体*******
  "屏幕工具栏中按饼
  "启用自定义工具
  CLEAR ls_functxt.
  ls_functxt-icon_text = '模板下载'."'Download Template'.
  ls_functxt-icon_id   = '@49@'.
  ls_functxt-quickinfo =  '模板下载'.
  sscrfields-functxt_01 = ls_functxt.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_FILENAME_FIND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_FILE  text
*----------------------------------------------------------------------*
FORM frm_filename_find   CHANGING xc_file.
  CALL FUNCTION 'WS_FILENAME_GET'
    EXPORTING
      def_filename     = xc_file
      def_path         = 'C:\'
      mask             = ',*.XLS.'
      mode             = 'O'
      title            = '文件名'
    IMPORTING
      filename         = xc_file
    EXCEPTIONS
      inv_winsys       = 1
      no_batch         = 2
      selection_cancel = 3
      selection_error  = 4
      OTHERS           = 5.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_DOWNLOAD_TEMPLATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0036   text
*      <--P_P_FILE  text
*----------------------------------------------------------------------*
FORM frm_download_template USING u_objid LIKE wwwdatatab-objid CHANGING ic_file.
  DATA:l_path   TYPE string.

  CALL METHOD zcl_ole_excel=>download_templet
    EXPORTING
      iv_objid        = u_objid
      iv_win_title    = '请指定下载路径'
      iv_df_extension = 'XLS'
    IMPORTING
      ev_fullpath     = l_path.

  CALL METHOD cl_gui_frontend_services=>execute
    EXPORTING
      document = l_path
    EXCEPTIONS
      OTHERS   = 10.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_UPLOAD_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_upload_data .
  DATA:ls_header LIKE LINE OF gt_header.
  DATA:ls_table_field LIKE  tabfield,
       lv_string      TYPE string.
  FIELD-SYMBOLS:<fs_field>    TYPE any..

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_file
      i_begin_col             = 1
      i_begin_row             = 3
      i_end_col               = 100
      i_end_row               = 9999
    TABLES
      intern                  = gt_upload
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

***将数据整理到内表中
  LOOP AT gt_upload ASSIGNING <fs_data>.
    IF <fs_data>-row EQ 1.
      MOVE-CORRESPONDING <fs_data> TO gt_header.
      APPEND gt_header.
      CONTINUE.
    ENDIF.
    CONDENSE <fs_data>-value.
    CLEAR ls_header.
    READ TABLE gt_header INTO ls_header WITH KEY col = <fs_data>-col.
    IF <fs_data>-value NE '/' AND ls_header-value IS NOT INITIAL.
      ls_table_field-tabname    = 'ZSMM_MAT_INFORECORD_DATA'.
      ls_table_field-fieldname  = ls_header-value.
*& 字段校验
      CALL FUNCTION 'RS_CHECK_CONV_EX_2_IN'
        EXPORTING
          input_external               = <fs_data>-value
          table_field                  = ls_table_field
        EXCEPTIONS
          input_not_numerical          = 1
          too_many_decimals            = 2
          more_than_one_sign           = 3
          ill_thousand_separator_dist  = 4
          too_many_digits              = 5
          sign_for_unsigned            = 6
          too_large                    = 7
          too_small                    = 8
          invalid_date_format          = 9
          invalid_date                 = 10
          invalid_time_format          = 11
          invalid_time                 = 12
          invalid_hex_digit            = 13
          unexpected_error             = 14
          invalid_fieldname            = 15
          field_and_descr_incompatible = 16
          input_too_long               = 17
          no_decimals                  = 18
          invalid_float                = 19
          conversion_exit_error        = 20
          OTHERS                       = 21.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO lv_string.
        MESSAGE e001(00) WITH |ROW,COL{ <fs_data>-row } { <fs_data>-col }{ lv_string } |.
      ENDIF.
    ENDIF.
    CONDENSE <fs_data>-value.
    ASSIGN COMPONENT ls_header-value OF STRUCTURE gt_out TO <fs_field>.
    IF sy-subrc = 0.
      <fs_field> = <fs_data>-value.
    ENDIF.
    AT END OF row.              "新的一行EXCEL数据_结束
      PERFORM frm_check_data.
      APPEND gt_out.            "收集一行EXCEL数据
      CLEAR gt_out.
    ENDAT.
  ENDLOOP.

*  ADD BY PFT 20171219
*  不允许修改采购信息记录价格，ME12修改
  IF gt_out[] IS NOT INITIAL.
    SELECT a~infnr a~matnr a~lifnr b~ekorg b~werks b~esokz
      INTO CORRESPONDING FIELDS OF TABLE gt_eina
      FROM eina AS a INNER JOIN eine AS b ON a~infnr = b~infnr
      FOR ALL ENTRIES IN gt_out
     WHERE a~matnr = gt_out-matnr
       AND a~lifnr = gt_out-lifnr
       AND b~ekorg = gt_out-ekorg
       AND b~werks = gt_out-werks
       AND b~esokz = gt_out-esokz.
    SORT gt_eina BY matnr lifnr ekorg werks esokz.
  ENDIF.

  LOOP AT gt_out.
    READ TABLE gt_eina WITH KEY matnr = gt_out-matnr
                                lifnr = gt_out-lifnr
                                ekorg = gt_out-ekorg
                                werks = gt_out-werks
                                esokz = gt_out-esokz BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-zicon = icon_led_red.
      gt_out-zmsg = '信息记录已存在'.
      MODIFY gt_out.
    ENDIF.
  ENDLOOP.
*  END BY PFT 20171219
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_CHECK_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_check_data .
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = gt_out-lifnr
    IMPORTING
      output = gt_out-lifnr.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = gt_out-matnr
    IMPORTING
      output = gt_out-matnr.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_fieldcat .
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
*     I_BUFFER_ACTIVE        =
      i_structure_name       = 'ZSMM_MAT_INFORECORD_DATA'
*     I_CLIENT_NEVER_DISPLAY = 'X'
*     I_BYPASSING_BUFFER     =
*     I_INTERNAL_TABNAME     =
    CHANGING
      ct_fieldcat            = gt_fcat[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  gt_fcat-fieldname = 'ZICON'.
  gt_fcat-coltext  = '状态'.
  gt_fcat-scrtext_l = '状态'.
  gt_fcat-scrtext_m = '状态'.
  gt_fcat-scrtext_s = '状态'.
  gt_fcat-inttype = 'C'.
  gt_fcat-intlen = '30'.
  INSERT gt_fcat INDEX 1.
  CLEAR gt_fcat.

  gt_fcat-fieldname = 'ZMSG'.
  gt_fcat-coltext  = '消息'.
  gt_fcat-scrtext_l = '消息'.
  gt_fcat-scrtext_m = '消息'.
  gt_fcat-scrtext_s = '消息'.
  gt_fcat-inttype = 'C'.
  gt_fcat-intlen = '200'.
  APPEND gt_fcat..
  CLEAR gt_fcat.

  gs_layout-cwidth_opt = 'X'.
  gs_layout-zebra = 'X'.
  gs_layout-no_toolbar = 'X'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_OUTPUT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_output_data .
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
*     I_INTERFACE_CHECK        = ' '
*     I_BYPASSING_BUFFER       =
*     I_BUFFER_ACTIVE          =
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'FRM_SET_PF_STATUS'
      i_callback_user_command  = 'FRM_USER_COMMAND'
*     I_CALLBACK_TOP_OF_PAGE   = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME         =
*     I_BACKGROUND_ID          = ' '
*     I_GRID_TITLE             =
*     I_GRID_SETTINGS          =
      is_layout_lvc            = gs_layout
      it_fieldcat_lvc          = gt_fcat[]
*     IT_EXCLUDING             =
*     IT_SPECIAL_GROUPS_LVC    =
*     IT_SORT_LVC              =
*     IT_FILTER_LVC            =
*     IT_HYPERLINK             =
*     IS_SEL_HIDE              =
      i_default                = 'X'
      i_save                   = 'A'
*     IS_VARIANT               =
*     IT_EVENTS                =
*     IT_EVENT_EXIT            =
*     IS_PRINT_LVC             =
*     IS_REPREP_ID_LVC         =
*     I_SCREEN_START_COLUMN    = 0
*     I_SCREEN_START_LINE      = 0
*     I_SCREEN_END_COLUMN      = 0
*     I_SCREEN_END_LINE        = 0
*     I_HTML_HEIGHT_TOP        =
*     I_HTML_HEIGHT_END        =
*     IT_ALV_GRAPHICS          =
*     IT_EXCEPT_QINFO_LVC      =
*     IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*     E_EXIT_CAUSED_BY_CALLER  =
*     ES_EXIT_CAUSED_BY_USER   =
    TABLES
      t_outtab                 = gt_out
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_PF_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_set_pf_status USING rt_extab TYPE slis_t_extab.
  SET PF-STATUS 'PF_1000'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_USER_COMMAND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_user_command USING r_ucomm LIKE sy-ucomm
                            rs_selfield TYPE slis_selfield..

  DATA:lv_grid TYPE REF TO cl_gui_alv_grid.

  rs_selfield-refresh = 'X'.
  rs_selfield-col_stable = 'X'.
  rs_selfield-row_stable = 'X'.

  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = lv_grid.

  CASE r_ucomm.
    WHEN 'ZUPLOAD'.  "导入数据
*    ADD BY PFT 20171219
      READ TABLE gt_out WITH KEY zicon = icon_led_red.
      IF sy-subrc = 0.
        MESSAGE e398(00) WITH '数据仍有问题，请修正' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      IF gv_exit EQ 'X'.
        MESSAGE e398(00) WITH '请勿重复导入' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
*    END BY PFT 20171219
      PERFORM frm_crtd_chng_info_data .
      CALL METHOD lv_grid->set_frontend_layout
        EXPORTING
          is_layout = gs_layout.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_CREATE_INFORECORD_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_crtd_chng_info_data .
  DATA:lv_infnr LIKE eina-infnr.
  LOOP AT gt_out WHERE msgty IS INITIAL.
    REFRESH:bdcdata,messtab.
    CLEAR:bdcdata,messtab.
***检查信息记录是否存在
**  CHANGE BY PFT 20171219
**  取消修改信息记录的功能
*    SELECT SINGLE a~infnr
*      INTO lv_infnr
*      FROM eina AS a
*     INNER JOIN eine AS b
*        ON a~infnr = b~infnr
*     WHERE a~matnr = gt_out-matnr
*       AND a~lifnr = gt_out-lifnr
*       AND b~ekorg = gt_out-ekorg
*       AND b~werks = gt_out-werks
*       AND b~esokz = gt_out-esokz.
*    IF sy-subrc = 0. "存在则进行修改
*      PERFORM frm_change_info_data.
*    ELSE.            "创建信息记录
    PERFORM frm_create_info_data.
*    ENDIF.
**  END BY PFT 20171219
    MODIFY gt_out.
  ENDLOOP.

*  ADD BY PFT 20171219
*  不允许多次点导入按钮
  gv_exit = 'X'.
*  END BY PFT 20171219
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_CREATE_INFO_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_create_info_data .
  DATA:lv_umrez(5)  TYPE c,
       lv_umren(5)  TYPE c,
       lv_aplfz(3)  TYPE c,
       lv_minbm(12) TYPE c,
       lv_netpr(12) TYPE c,
       lv_peinh(5)  TYPE c,
       lv_kstbm(12) TYPE c,
       lv_kbetr(12) TYPE c.
  DATA:lv_msg TYPE string.

  PERFORM bdc_dynpro      USING 'SAPMM06I' '0100'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'EINA-LIFNR'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '/00'.
  PERFORM bdc_field       USING 'EINA-LIFNR'
                                gt_out-lifnr.
  PERFORM bdc_field       USING 'EINA-MATNR'
                                gt_out-matnr.
  PERFORM bdc_field       USING 'EINE-EKORG'
                                gt_out-ekorg.
  PERFORM bdc_field       USING 'EINE-WERKS'
                                gt_out-werks.
  CASE gt_out-esokz.
    WHEN '0'.
      PERFORM bdc_field       USING 'RM06I-NORMB'
                              'X'.
    WHEN '3'.
      PERFORM bdc_field       USING 'RM06I-NORMB'
                              ''.
      PERFORM bdc_field       USING 'RM06I-LOHNB'
                              'X'.
    WHEN OTHERS.
  ENDCASE.
  PERFORM bdc_dynpro      USING 'SAPMM06I' '0101'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=EINE'.
  PERFORM bdc_field       USING 'EINA-MEINS'
                                gt_out-meins.
  CLEAR:lv_umrez,lv_umren.
  lv_umrez = gt_out-umrez.
  lv_umren = gt_out-umren.
  PERFORM bdc_field       USING 'EINA-UMREZ'
                                lv_umrez.
  PERFORM bdc_field       USING 'EINA-UMREN'
                                lv_umren.
  PERFORM bdc_dynpro      USING 'SAPMM06I' '0102'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=KO'.
*   CHANGE BY PFT 20171221
*   取消计划交货时间和采购组，系统给值
*  lv_aplfz = gt_out-aplfz.
*  PERFORM bdc_field       USING 'EINE-APLFZ'
*                                lv_aplfz.
*  PERFORM bdc_field       USING 'EINE-EKGRP'
*                                gt_out-ekgrp.
*  END BY PFT 20171221
  lv_minbm = gt_out-minbm.
  PERFORM bdc_field       USING 'EINE-MINBM'
                                lv_minbm.
  PERFORM bdc_field       USING 'EINE-WEBRE'
                                gt_out-webre.
  PERFORM bdc_field       USING 'EINE-MWSKZ'
                                gt_out-mwskz.
  PERFORM bdc_field       USING 'EINE-BSTAE' '0001'.  "ADD BY PFT 20171220
  lv_netpr = gt_out-netpr.
  PERFORM bdc_field       USING 'EINE-NETPR'
                                lv_netpr.
  PERFORM bdc_field       USING 'EINE-WAERS'
                                gt_out-waers.
  lv_peinh = gt_out-peinh.
  PERFORM bdc_field       USING 'EINE-PEINH'
                                lv_peinh.
  PERFORM bdc_field       USING 'EINE-BPRME'
                                gt_out-bprme.
  PERFORM bdc_dynpro      USING 'SAPMV13A' '0201'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'KONP-KSCHL(01)'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=PSTF'.
  PERFORM bdc_field       USING 'RV13A-DATAB'
                                gt_out-datab.
  PERFORM bdc_field       USING 'RV13A-DATBI'
                                gt_out-datbi.
  PERFORM bdc_field       USING 'RV130-SELKZ(01)'
                                'X'.
  PERFORM bdc_dynpro      USING 'SAPMV13A' '0303'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'KONM-KBETR(04)'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=SICH'.
  PERFORM bdc_field       USING 'RV13A-DATAB'
                                gt_out-datab.
  PERFORM bdc_field       USING 'RV13A-DATBI'
                                gt_out-datbi.
  IF gt_out-kstbm_2 IS NOT INITIAL.
    lv_kstbm = gt_out-kstbm_2.
    PERFORM bdc_field       USING 'KONM-KSTBM(02)'
                                  lv_kstbm.
    lv_kbetr = gt_out-kbetr_2.
    PERFORM bdc_field       USING 'KONM-KBETR(02)'
                                  lv_kbetr.
  ENDIF.
  IF gt_out-kstbm_3 IS NOT INITIAL.
    lv_kstbm = gt_out-kstbm_3.
    PERFORM bdc_field       USING 'KONM-KSTBM(03)'
                                  lv_kstbm.
    lv_kbetr = gt_out-kbetr_3.
    PERFORM bdc_field       USING 'KONM-KBETR(03)'
                                  lv_kbetr.
  ENDIF.
  IF gt_out-kstbm_4 IS NOT INITIAL.
    lv_kstbm = gt_out-kstbm_4.
    PERFORM bdc_field       USING 'KONM-KSTBM(04)'
                                 lv_kstbm.
    lv_kbetr = gt_out-kbetr_4.
    PERFORM bdc_field       USING 'KONM-KBETR(04)'
                                  lv_kbetr.
  ENDIF.

  IF gt_out-kstbm_5 IS NOT INITIAL.
    lv_kstbm = gt_out-kstbm_5.
    PERFORM bdc_field       USING 'KONM-KSTBM(05)'
                                 lv_kstbm.
    lv_kbetr = gt_out-kbetr_5.
    PERFORM bdc_field       USING 'KONM-KBETR(05)'
                                  lv_kbetr.
  ENDIF.

  IF gt_out-kstbm_6 IS NOT INITIAL.
    lv_kstbm = gt_out-kstbm_6.
    PERFORM bdc_field       USING 'KONM-KSTBM(06)'
                                 lv_kstbm.
    lv_kbetr = gt_out-kbetr_6.
    PERFORM bdc_field       USING 'KONM-KBETR(06)'
                                  lv_kbetr.
  ENDIF.

  CALL TRANSACTION 'ME11' USING bdcdata MODE gv_mode UPDATE 'L' MESSAGES INTO messtab.
  LOOP AT messtab WHERE msgtyp = 'E' OR msgtyp = 'A'.
    EXIT.
  ENDLOOP.
  IF sy-subrc = 0.
    gt_out-zicon = icon_led_red.
    LOOP AT messtab WHERE msgtyp = 'E' OR msgtyp = 'A'.
      CLEAR lv_msg.
      CALL FUNCTION 'MESSAGE_TEXT_BUILD'
        EXPORTING
          msgid               = messtab-msgid
          msgnr               = messtab-msgnr
          msgv1               = messtab-msgv1
          msgv2               = messtab-msgv2
          msgv3               = messtab-msgv3
          msgv4               = messtab-msgv4
        IMPORTING
          message_text_output = lv_msg.
      IF gt_out-zmsg IS INITIAL.
        gt_out-zmsg =  lv_msg.
      ELSE.
        CONCATENATE gt_out-zmsg  lv_msg INTO gt_out-zmsg .
      ENDIF.
    ENDLOOP.
  ELSE.
    gt_out-zicon = icon_led_green.
    gt_out-zmsg = '导入成功'.
  ENDIF.
ENDFORM.

*----------------------------------------------------------------------*
*        Start new screen                                              *
*----------------------------------------------------------------------*
FORM bdc_dynpro USING program dynpro.
  CLEAR bdcdata.
  bdcdata-program  = program.
  bdcdata-dynpro   = dynpro.
  bdcdata-dynbegin = 'X'.
  APPEND bdcdata.
ENDFORM.

*----------------------------------------------------------------------*
*        Insert field                                                  *
*----------------------------------------------------------------------*
FORM bdc_field USING fnam fval.
*  IF FVAL <> NODATA.
  CLEAR bdcdata.
  bdcdata-fnam = fnam.
  bdcdata-fval = fval.
  APPEND bdcdata.
*  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_CHANGE_INFO_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_change_info_data .
  DATA:lv_umrez(5)  TYPE c,
       lv_umren(5)  TYPE c,
       lv_aplfz(3)  TYPE c,
       lv_minbm(12) TYPE c,
       lv_netpr(12) TYPE c,
       lv_peinh(5)  TYPE c,
       lv_kstbm(12) TYPE c,
       lv_kbetr(12) TYPE c.
  DATA:lv_msg TYPE string.

  PERFORM bdc_dynpro      USING 'SAPMM06I' '0100'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'EINA-LIFNR'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '/00'.
  PERFORM bdc_field       USING 'EINA-LIFNR'
                                gt_out-lifnr.
  PERFORM bdc_field       USING 'EINA-MATNR'
                                gt_out-matnr.
  PERFORM bdc_field       USING 'EINE-EKORG'
                                gt_out-ekorg.
  PERFORM bdc_field       USING 'EINE-WERKS'
                                gt_out-werks.
  CASE gt_out-esokz.
    WHEN '0'.
      PERFORM bdc_field       USING 'RM06I-NORMB'
                              'X'.
    WHEN '3'.
      PERFORM bdc_field       USING 'RM06I-NORMB'
                              ''.
      PERFORM bdc_field       USING 'RM06I-LOHNB'
                              'X'.
    WHEN OTHERS.
  ENDCASE.

  PERFORM bdc_dynpro      USING 'SAPMM06I' '0101'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=EINE'.
  PERFORM bdc_field       USING 'EINA-MEINS'
                                gt_out-meins.
  CLEAR:lv_umrez,lv_umren.
  lv_umrez = gt_out-umrez.
  lv_umren = gt_out-umren.
  PERFORM bdc_field       USING 'EINA-UMREZ'
                                lv_umrez.
  PERFORM bdc_field       USING 'EINA-UMREN'
                                lv_umren.
  PERFORM bdc_dynpro      USING 'SAPMM06I' '0102'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=KO'.
  lv_aplfz = gt_out-aplfz.
  PERFORM bdc_field       USING 'EINE-APLFZ'
                                lv_aplfz.
  PERFORM bdc_field       USING 'EINE-EKGRP'
                                gt_out-ekgrp.
  lv_minbm = gt_out-minbm.
  PERFORM bdc_field       USING 'EINE-NORBM'
                                lv_minbm.
  PERFORM bdc_field       USING 'EINE-WEBRE'
                                gt_out-webre.
  PERFORM bdc_field       USING 'EINE-MWSKZ'
                                gt_out-mwskz.

  PERFORM bdc_dynpro      USING 'SAPLV14A' '0102'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=NEWD'.
  PERFORM bdc_dynpro      USING 'SAPMV13A' '0201'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '/00'.
  PERFORM bdc_field       USING 'RV13A-DATAB'
                                gt_out-datab.
  PERFORM bdc_field       USING 'RV13A-DATBI'
                                gt_out-datbi.
  lv_netpr = gt_out-netpr.
  PERFORM bdc_field       USING 'KONP-KBETR(01)'
                                lv_netpr.
  PERFORM bdc_dynpro      USING 'SAPMV13A' '0201'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'KONP-KSCHL(01)'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=PSTF'.
  PERFORM bdc_field       USING 'RV13A-DATAB'
                                 gt_out-datab.
  PERFORM bdc_field       USING 'RV13A-DATBI'
                                 gt_out-datbi.
  PERFORM bdc_field       USING 'RV130-SELKZ(01)'
                                 'X'.
  PERFORM bdc_dynpro      USING 'SAPMV13A' '0303'.
  PERFORM bdc_field       USING 'BDC_CURSOR'
                                'KONM-KBETR(03)'.
  PERFORM bdc_field       USING 'BDC_OKCODE'
                                '=SICH'.
  PERFORM bdc_field       USING 'RV13A-DATAB'
                                gt_out-datab.
  PERFORM bdc_field       USING 'RV13A-DATBI'
                                gt_out-datbi.

  IF gt_out-kstbm_2 IS NOT INITIAL.
    lv_kstbm = gt_out-kstbm_2.
    PERFORM bdc_field       USING 'KONM-KSTBM(02)'
                                  lv_kstbm.
    lv_kbetr = gt_out-kbetr_2.
    PERFORM bdc_field       USING 'KONM-KBETR(02)'
                                  lv_kbetr.
  ENDIF.
  IF gt_out-kstbm_3 IS NOT INITIAL.
    lv_kstbm = gt_out-kstbm_3.
    PERFORM bdc_field       USING 'KONM-KSTBM(03)'
                                  lv_kstbm.
    lv_kbetr = gt_out-kbetr_3.
    PERFORM bdc_field       USING 'KONM-KBETR(03)'
                                  lv_kbetr.
  ENDIF.
  IF gt_out-kstbm_4 IS NOT INITIAL.
    lv_kstbm = gt_out-kstbm_4.
    PERFORM bdc_field       USING 'KONM-KSTBM(04)'
                                 lv_kstbm.
    lv_kbetr = gt_out-kbetr_4.
    PERFORM bdc_field       USING 'KONM-KBETR(04)'
                                  lv_kbetr.
  ENDIF.

  CALL TRANSACTION 'ME12' USING bdcdata MODE gv_mode UPDATE 'L' MESSAGES INTO messtab.
  LOOP AT messtab WHERE msgtyp = 'E' OR msgtyp = 'A'.
    EXIT.
  ENDLOOP.
  IF sy-subrc = 0.
    gt_out-zicon = icon_led_red.
    LOOP AT messtab WHERE msgtyp = 'E' OR msgtyp = 'A'.
      CLEAR lv_msg.
      CALL FUNCTION 'MESSAGE_TEXT_BUILD'
        EXPORTING
          msgid               = messtab-msgid
          msgnr               = messtab-msgnr
          msgv1               = messtab-msgv1
          msgv2               = messtab-msgv2
          msgv3               = messtab-msgv3
          msgv4               = messtab-msgv4
        IMPORTING
          message_text_output = lv_msg.
      IF gt_out-zmsg IS INITIAL.
        gt_out-zmsg =  lv_msg.
      ELSE.
        CONCATENATE gt_out-zmsg  lv_msg INTO gt_out-zmsg .
      ENDIF.
    ENDLOOP.
  ELSE.
    gt_out-zicon = icon_led_green.
    gt_out-zmsg = '修改成功'.
  ENDIF.
ENDFORM.
