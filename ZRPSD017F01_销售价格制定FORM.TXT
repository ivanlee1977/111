*&---------------------------------------------------------------------*
*&  包含                ZRPSD001F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_MARA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_mara .
  REFRESH: gt_mara,gt_ausp,gt_tvm1t.
  IF r1 EQ 'X' OR r2 EQ 'X'.
    SELECT a~matnr a~matkl b~mvgr1 a~matnr AS objek
      INTO CORRESPONDING FIELDS OF TABLE gt_mara
      FROM mara AS a INNER JOIN mvke AS b ON a~matnr = b~matnr
      WHERE a~matkl IN ('2010','4010','5010')
        AND b~mvgr1 IN s_mvgr1.
    SORT gt_mara BY matnr.
    DELETE ADJACENT DUPLICATES FROM gt_mara COMPARING ALL FIELDS.

    CHECK gt_mara[] IS NOT INITIAL.
    SELECT a~objek a~atinn a~atwrt b~atnam
      INTO CORRESPONDING FIELDS OF TABLE gt_ausp
      FROM ausp AS a INNER JOIN cabn AS b ON a~atinn = b~atinn
      FOR ALL ENTRIES IN gt_mara
      WHERE b~atnam IN ('ZFER_XL','ZFER_ZXL','ZFER_CPX')
        AND a~objek = gt_mara-objek.
    SORT gt_ausp BY objek atnam.

    SELECT * INTO TABLE gt_tvm1t FROM tvm1t WHERE spras = sy-langu.
    SORT gt_tvm1t BY mvgr1.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_MODIFY_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_modify_screen .
  IF r1 = 'X'.    "数据导入
    LOOP AT SCREEN .
      IF screen-group1 EQ 'M1'.
        screen-active = 0.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSEIF r3 = 'X'.
    LOOP AT SCREEN .
      IF screen-group1 EQ 'M2'.
        screen-active = 0.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
      IF screen-group1 EQ 'M1'.
        screen-active = 1.
        screen-invisible = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SUB_SEARCH_HELP_ZXL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sub_search_help_zxl USING lv_field LIKE dfies-fieldname
                               lv_dynfield LIKE help_info-dynprofld
                               lv_atnam LIKE cabn-atnam.
  DATA: lv_pvalkey TYPE ddshpvkey.

  DATA: lt_zxl LIKE gt_xl OCCURS 0 WITH HEADER LINE.

  DELETE gt_mara WHERE mvgr1 NOT IN s_mvgr1.

  LOOP AT gt_ausp WHERE atnam = lv_atnam.
    READ TABLE gt_mara WITH KEY objek = gt_ausp-objek BINARY SEARCH.
    IF sy-subrc = 0.
      lt_zxl-atwrt = gt_ausp-atwrt.
      APPEND lt_zxl.
    ENDIF.
  ENDLOOP.

  SORT lt_zxl BY atwrt.
  DELETE ADJACENT DUPLICATES FROM lt_zxl.

  lv_pvalkey = lv_field.
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = lv_field
      pvalkey         = lv_pvalkey
      dynpprog        = sy-repid
      dynpnr          = sy-dynnr
      dynprofield     = lv_dynfield
      window_title    = '选择'
      value           = ' '
      value_org       = 'S'
    TABLES
      value_tab       = lt_zxl
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_data .
  REFRESH: gt_alv.
  LOOP AT gt_mara.
    CLEAR: gt_mvgr1.
    gt_mvgr1-mvgr1 = gt_mara-mvgr1.
    READ TABLE gt_tvm1t WITH KEY mvgr1 = gt_mvgr1-mvgr1.
    IF sy-subrc = 0.
      gt_mvgr1-bezei = gt_tvm1t-bezei.
    ENDIF.
    COLLECT gt_mvgr1.
    CLEAR: gt_mara.
  ENDLOOP.

  LOOP AT gt_ausp WHERE atnam EQ 'ZFER_XL' OR atnam EQ 'ZFER_ZXL'.
    CLEAR: gt_xl,gt_zxl.
    CASE gt_ausp-atnam.
      WHEN 'ZFER_XL'.
        gt_xl-atwrt = gt_ausp-atwrt.
        COLLECT gt_xl.
      WHEN 'ZFER_ZXL'.
        gt_zxl-atwrt = gt_ausp-atwrt.
        COLLECT gt_zxl.
      WHEN OTHERS.
    ENDCASE.
  ENDLOOP.

  LOOP AT gt_xl .
    CLEAR: gt_alv.
    gt_alv-zfer_xl = gt_xl-atwrt.
    LOOP AT gt_zxl.
      gt_alv-zfer_zxl = gt_zxl-atwrt.
      LOOP AT gt_mvgr1.
        gt_alv-mvgr1 = gt_mvgr1-mvgr1.
        gt_alv-bezei = gt_mvgr1-bezei.
        COLLECT gt_alv.
      ENDLOOP.
      IF sy-subrc <> 0.
        COLLECT gt_alv.
      ENDIF.
    ENDLOOP.
    IF sy-subrc <> 0.
      COLLECT gt_alv.
    ENDIF.
  ENDLOOP.

  SELECT * INTO TABLE gt_ztsd009 FROM ztsd009 WHERE zsfsc NE 'X'.
  SORT gt_ztsd009 BY zfer_xl zfer_zxl mvgr1.

  LOOP AT gt_alv .
    READ TABLE gt_ztsd009 WITH KEY zfer_xl = gt_alv-zfer_xl zfer_zxl = gt_alv-zfer_zxl mvgr1 = gt_alv-mvgr1.
    IF sy-subrc = 0.
      gt_alv-zjjb = gt_ztsd009-zjjb.
    ENDIF.
    MODIFY gt_alv TRANSPORTING zjjb.
    CLEAR: gt_alv.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_PROCESS_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_process_data .
  DATA: lv_tabix LIKE sy-tabix.
**************************************************************
* 逻辑:当R3(物料成本查询)时,从表MARA和MBEW中取物料的产品成本和物料组
*      当R2(产品建议报价)时,从内表MARA和MVKE中取出物料组\产品定位放在GT_ALV中
*                           关联表MVKE,从表中取出物料的产品成本
  REFRESH: gt_alv,gt_ztsd009,gt_makt,gt_t023t.
  IF r3 EQ 'X'.
    SELECT a~matnr a~matkl b~stprs
      INTO CORRESPONDING FIELDS OF TABLE gt_alv
      FROM mara AS a INNER JOIN mbew AS b ON a~matnr = b~matnr
      WHERE a~matnr IN s_matnr.
  ELSEIF r2 EQ 'X'.
    SELECT a~matnr a~matkl b~mvgr1 a~matnr AS objek c~stprs
      INTO CORRESPONDING FIELDS OF TABLE gt_alv
      FROM mara AS a INNER JOIN mvke AS b ON a~matnr = b~matnr
                     INNER JOIN mbew AS c ON a~matnr = c~matnr
      WHERE a~matkl IN ('2010','4010','5010')
        AND b~mvgr1 IN s_mvgr1
        AND a~matnr IN s_matnr.
    SORT gt_alv BY matnr.
    DELETE ADJACENT DUPLICATES FROM gt_alv COMPARING ALL FIELDS.

    SELECT * INTO TABLE gt_ztsd009 FROM ztsd009 WHERE zsfsc NE 'X'.
    SORT gt_ztsd009 BY zfer_xl zfer_zxl mvgr1.
  ENDIF.
**************************************************************
********************读取物料描述、物料组****************************
  SELECT * INTO TABLE gt_makt FROM makt
    FOR ALL ENTRIES IN gt_alv
    WHERE matnr = gt_alv-matnr
      AND spras = sy-langu.
  SORT gt_makt BY matnr.

  SELECT * INTO TABLE gt_t023t FROM t023t WHERE spras = sy-langu.
  SORT gt_t023t BY matkl.
**************************************************************
  LOOP AT gt_alv.
    CLEAR:lv_tabix.
    lv_tabix = sy-tabix.
*  取出物料的系列、子系列、产品线以及产品定位
    IF r2 EQ 'X'.
      LOOP AT gt_ausp WHERE objek = gt_alv-objek .
        CASE gt_ausp-atnam.
          WHEN 'ZFER_XL'.
            gt_alv-zfer_xl = gt_ausp-atwrt.
          WHEN 'ZFER_ZXL'.
            gt_alv-zfer_zxl = gt_ausp-atwrt.
          WHEN 'ZFER_CPX'.
            gt_alv-zfer_cpx = gt_ausp-atwrt.
          WHEN OTHERS.
        ENDCASE.
        CLEAR: gt_ausp.
      ENDLOOP.

      IF gt_alv-zfer_xl NOT IN s_xl.
        DELETE gt_alv INDEX lv_tabix.
        CONTINUE.
      ENDIF.

      IF gt_alv-zfer_zxl NOT IN s_zxl.
        DELETE gt_alv INDEX lv_tabix.
        CONTINUE.
      ENDIF.

      IF gt_alv-zfer_cpx NOT IN s_cpx.
        DELETE gt_alv INDEX lv_tabix.
        CONTINUE.
      ENDIF.
*   根据物料的系列\子系列\产品定位从表ZTSD009中取出加价比
      READ TABLE gt_ztsd009 WITH KEY zfer_xl = gt_alv-zfer_xl zfer_zxl = gt_alv-zfer_zxl mvgr1 = gt_alv-mvgr1.
      IF sy-subrc = 0.
        gt_alv-zjjb = gt_ztsd009-zjjb.
      ENDIF.
*   计算建议零售价= 产品成本*加价比
      gt_alv-jylsj = gt_alv-stprs * ( gt_alv-zjjb / 100 + 1 ) .
    ENDIF.

*  取物料描述
    READ TABLE gt_makt WITH KEY matnr = gt_alv-matnr BINARY SEARCH.
    IF sy-subrc = 0.
      gt_alv-maktx = gt_makt-maktx.
    ENDIF.
*  取物料组描述
    READ TABLE gt_t023t WITH KEY matkl = gt_alv-matkl BINARY SEARCH.
    IF sy-subrc = 0.
      gt_alv-wgbez = gt_t023t-wgbez.
    ENDIF.
*  取产品定位描述
    READ TABLE gt_tvm1t WITH KEY mvgr1 = gt_alv-mvgr1 BINARY SEARCH.
    IF sy-subrc = 0.
      gt_alv-bezei = gt_tvm1t-mvgr1.
    ENDIF.

    MODIFY gt_alv.
    CLEAR: gt_alv.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SUB_BUILD_FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sub_build_fieldcat .
  REFRESH:g_it_fieldcat.
  IF r1 EQ 'X'.
    PERFORM sub_set_fieldcat USING 'X' 'SEL'         '选择框'        ''  'X'  ''  'X'  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING 'X' 'ZFER_XL'     '系列'          ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING 'X' 'ZFER_ZXL'    '子系列'        ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING 'X' 'MVGR1'       '产品定位'      ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'BEZEI'       '产品定位描述'  ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'ZJJB'        '加价比(%)'     ''  ''  ''  'X'  ''  'ZJJB'  'ZTSD009' ''.
  ELSEIF r2 EQ 'X'.
    PERFORM sub_set_fieldcat USING 'X' 'MATNR'     '物料'          'X'  ''  ''  ''  ''  'MATNR'  'MARA' ''.
    PERFORM sub_set_fieldcat USING ''  'MAKTX'     '物料描述'      ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'STPRS'     '产品成本'      'X'  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'JYLSJ'     '建议零售价'    'X'  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'ZFER_XL'   '系列'          ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'ZFER_ZXL'  '子系列'        ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'ZFER_CPX'  '产品线'        ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'MVGR1'     '产品定位'      ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'BEZEI'     '产品定位描述'  ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'ZJJB'      '加价比(%)'     ''  ''  ''  ''  ''  'ZJJB'  'ZTSD009' ''.
    PERFORM sub_set_fieldcat USING ''  'MATKL'     '物料组'        ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'WGBEZ'     '物料组描述'    ''  ''  ''  ''  ''  ''  '' ''.
  ELSEIF r3 EQ 'X'.
    PERFORM sub_set_fieldcat USING 'X' 'MATNR'     '物料'          'X'  ''  ''  ''  ''  'MATNR'  'MARA' ''.
    PERFORM sub_set_fieldcat USING ''  'MAKTX'     '物料描述'      ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'STPRS'     '产品成本'      'X'  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'MATKL'     '物料组'        ''  ''  ''  ''  ''  ''  '' ''.
    PERFORM sub_set_fieldcat USING ''  'WGBEZ'     '物料组描述'    ''  ''  ''  ''  ''  ''  '' ''.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  pf_status_set
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->RT_EXTAB   text
*----------------------------------------------------------------------*
FORM pf_status_set USING rt_extab TYPE slis_t_extab.
  DATA:fcode           TYPE TABLE OF sy-ucomm.
  REFRESH: fcode.
  IF r1 NE 'X'.
    APPEND 'ZUPLOAD' TO fcode."导入
    APPEND 'ZDELE' TO fcode."导入
  ENDIF.
  SET PF-STATUS 'PF_001' EXCLUDING fcode.
ENDFORM. "pf_status_set
*&---------------------------------------------------------------------*
*&      Form  alv_user_command
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
*      -->UCOMM      text
*      -->SELFIELD   text
*----------------------------------------------------------------------*
FORM alv_user_command USING ucomm LIKE sy-ucomm
      selfield TYPE slis_selfield.
  PERFORM sub_check_changed_data.

  CASE ucomm.
    WHEN 'ALL'.
      LOOP AT gt_alv WHERE sel = ''.
        gt_alv-sel = 'X'.
        MODIFY gt_alv TRANSPORTING sel.
        CLEAR: gt_alv.
      ENDLOOP.
    WHEN 'SAL'.
      LOOP AT gt_alv WHERE sel = 'X'.
        CLEAR: gt_alv-sel .
        MODIFY gt_alv TRANSPORTING sel.
        CLEAR: gt_alv.
      ENDLOOP.
    WHEN 'ZUPLOAD'.
      READ TABLE gt_alv WITH KEY sel = 'X'.
      IF sy-subrc <> 0.
        MESSAGE e398(00) WITH '请选择需要维护的记录' DISPLAY LIKE 'E'.
      ENDIF.
      PERFORM frm_update_ztsd009.
    WHEN 'ZDELE'.
      READ TABLE gt_alv WITH KEY sel = 'X'.
      IF sy-subrc <> 0.
        MESSAGE e398(00) WITH '请选择需要删除的记录' DISPLAY LIKE 'E'.
      ENDIF.
      DATA: answer TYPE c.
      CLEAR: answer.
      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          titlebar              = '系统警告'
          text_question         = '数据删除后不能恢复，确认要删除选择的记录吗？'
          text_button_1         = '删除'
          icon_button_1         = 'ICON_DELETE'
          text_button_2         = '不删除'
          icon_button_2         = 'ICON_CANCEL'
          default_button        = '2'
          display_cancel_button = 'X'
        IMPORTING
          answer                = answer
        EXCEPTIONS
          text_not_found        = 1
          OTHERS                = 2.

      CHECK answer EQ '1'.
      PERFORM frm_delet_ztsd009.
    WHEN OTHERS.
  ENDCASE.
  PERFORM sub_refresh_data.
ENDFORM. "alv_user_command
*&---------------------------------------------------------------------*
*&      Form  FRM_UPDATE_ZTSD009
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_update_ztsd009 .
  REFRESH: lt_ztsd009.
  LOOP AT gt_alv WHERE sel = 'X'.
    CLEAR: lt_ztsd009.
    MOVE-CORRESPONDING gt_alv TO lt_ztsd009.
    lt_ztsd009-ernam = sy-uname.
    lt_ztsd009-erdat = sy-datum.
    lt_ztsd009-uzeit = sy-uzeit.
    COLLECT lt_ztsd009.
    CLEAR: gt_alv.
  ENDLOOP.

  IF lt_ztsd009[] IS NOT INITIAL.
    MODIFY ztsd009 FROM TABLE lt_ztsd009 .
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
      MESSAGE s398(00) WITH '定价策略维护成功' DISPLAY LIKE 'S'.
    ELSE.
      ROLLBACK WORK .
      MESSAGE e398(00) WITH '定价策略维护失败' DISPLAY LIKE 'E'.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_DELET_ZTSD009
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_delet_ztsd009 .
  REFRESH: lt_ztsd009.
  LOOP AT gt_alv WHERE sel = 'X'.
    CLEAR: lt_ztsd009.
    MOVE-CORRESPONDING gt_alv TO lt_ztsd009.
    lt_ztsd009-zsfsc = 'X'.
    lt_ztsd009-ernam = sy-uname.
    lt_ztsd009-erdat = sy-datum.
    lt_ztsd009-uzeit = sy-uzeit.
    COLLECT lt_ztsd009.
    CLEAR: gt_alv.
  ENDLOOP.

  IF lt_ztsd009[] IS NOT INITIAL.
    MODIFY ztsd009 FROM TABLE lt_ztsd009 .
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
      MESSAGE s398(00) WITH '删除成功' DISPLAY LIKE 'S'.
    ELSE.
      ROLLBACK WORK .
      MESSAGE e398(00) WITH '删除失败' DISPLAY LIKE 'E'.
    ENDIF.
  ENDIF.
ENDFORM.
