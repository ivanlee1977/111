*&---------------------------------------------------------------------*
*&  包含                ZRPMM039F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_data .
  DATA:lt_makt LIKE makt OCCURS 0 WITH HEADER LINE,
       lt_konm LIKE TABLE OF konm WITH HEADER LINE,
       lt_konp LIKE TABLE OF konp WITH HEADER LINE,
       lt_lfa1 LIKE TABLE OF lfa1 WITH HEADER LINE,
*       lt_eine LIKE TABLE OF eine WITH HEADER LINE,
       lt_a017 LIKE TABLE OF a017 WITH HEADER LINE.
  DATA lv_knumh TYPE a017-knumh.
  DATA: BEGIN OF lt_mara OCCURS 0,
          matnr TYPE mara-matnr,
          matkl TYPE mara-matkl,
          wgbez TYPE t023t-wgbez,
        END OF lt_mara.

***抓取满足条件的数据
  SELECT
       b~matnr
       b~lifnr
       a~esokz
       b~infnr
       a~ekgrp
        a~bpumn AS umren
        b~meins
        a~bpumz AS umrez
        a~bprme AS lmein
    INTO CORRESPONDING FIELDS OF TABLE gt_out
    FROM eine AS a INNER JOIN eina AS b ON a~infnr = b~infnr
    WHERE matnr IN s_matnr
    AND b~matnr <> ''
    AND b~infnr IN s_infnr
    AND a~ekgrp IN s_ekgrp
    AND b~lifnr IN s_lifnr.

  CHECK gt_out[] IS NOT INITIAL.

  SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_lfa1 FROM lfa1 FOR ALL ENTRIES IN gt_out WHERE lifnr = gt_out-lifnr .
  SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_makt FROM makt FOR ALL ENTRIES IN gt_out WHERE matnr = gt_out-matnr AND spras = sy-langu.
*  SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_eine FROM eine FOR ALL ENTRIES IN gt_out WHERE infnr = gt_out-infnr AND ekorg = 1000 AND werks = 1000.


  SELECT b~wgbez a~matnr a~matkl INTO CORRESPONDING FIELDS OF TABLE lt_mara FROM mara AS a INNER JOIN t023t AS b ON a~matkl = b~matkl
     FOR ALL ENTRIES IN gt_out WHERE matnr = gt_out-matnr .

  SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_a017 FROM a017
    FOR ALL ENTRIES IN gt_out
    WHERE matnr = gt_out-matnr
    AND esokz = gt_out-esokz
    AND lifnr = gt_out-lifnr
    AND kschl = 'PB00'
    AND datbi GE sy-datum
    AND datab LE sy-datum.

  IF lt_a017[] IS NOT INITIAL.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_konp FROM konp FOR ALL ENTRIES IN lt_a017 WHERE knumh = lt_a017-knumh.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_konm FROM konm FOR ALL ENTRIES IN lt_a017 WHERE knumh = lt_a017-knumh.
  ENDIF.

*  SORT lt_eine BY infnr.
  SORT lt_makt BY matnr.
  SORT lt_mara BY matnr.
  SORT lt_konp BY knumh.
  SORT lt_konm BY knumh kstbm.
  SORT lt_lfa1 BY lifnr.

  FIELD-SYMBOLS :<f1>     TYPE any,
                 <fs_str> TYPE any,
                 <f2>     TYPE any.
  DATA: lv_index      TYPE sy-index,
        lv_col        TYPE char1,
        lv            TYPE int8,
        lv_name       TYPE string,
        lv_name1      TYPE string,
        fieldname(20).
  DATA :lv_objek LIKE ausp-objek.
  DATA: ls_class      LIKE TABLE OF sclass WITH HEADER LINE,
        ls_objectdata LIKE TABLE OF clobjdat WITH HEADER LINE.

  LOOP AT gt_out.
    READ TABLE lt_mara WITH KEY matnr = gt_out-matnr BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-matkl = lt_mara-matkl.
      gt_out-wgbez = lt_mara-wgbez.
      IF s_matkl[] IS NOT INITIAL AND lt_mara-matkl NOT IN s_matkl.
        DELETE gt_out.
        CONTINUE.
      ENDIF.
    ENDIF.

    SELECT SINGLE eknam INTO gt_out-eknam FROM t024 WHERE ekgrp = gt_out-ekgrp.
    READ TABLE lt_a017 WITH  KEY matnr = gt_out-matnr lifnr = gt_out-lifnr kschl = 'PB00' esokz = gt_out-esokz.
    IF sy-subrc = 0.
      lv_knumh = lt_a017-knumh.
    ENDIF.
    READ TABLE lt_konp WITH  KEY knumh = lv_knumh.
    IF sy-subrc = 0 .
      gt_out-konwa = lt_konp-konwa.
      gt_out-kpein = lt_konp-kpein.
      gt_out-kmein = lt_konp-kmein.
      IF p1 <> 'X'.
        gt_out-kbetr1 = lt_konp-kbetr.
        gt_out-s1 = lt_konp-kstbm.
      ENDIF.

    ENDIF.

    LOOP AT lt_konm WHERE knumh = lv_knumh.
      lv_col = lv_col + 1.
      CONCATENATE 'GT_OUT-KBETR' lv_col INTO fieldname.
      ASSIGN (fieldname) TO <f1>.
      <f1> = lt_konm-kbetr.
      CLEAR :fieldname.

      CONCATENATE 'GT_OUT-S' lv_col INTO fieldname.
      ASSIGN (fieldname) TO <f2>.
      lv = lt_konm-kstbm.
      lv_name = lv.
      lv_index = sy-tabix + 1.
      READ TABLE lt_konm INDEX lv_index .
      IF sy-subrc = 0 .
        IF lt_konm-knumh = lv_knumh.
          IF lv_index GE 2 AND lt_konm-kstbm <> 0.
            lv = lt_konm-kstbm.
            lv_name1 = lv.
            CONCATENATE lv_name '-' lv_name1 INTO lv_name.
          ENDIF.
        ENDIF.
      ENDIF.
      CONDENSE lv_name NO-GAPS.
      <f2> = lv_name.
      CLEAR :fieldname,lv_name,lv_index,lv_name1.
    ENDLOOP.


    READ TABLE lt_makt WITH KEY matnr = gt_out-matnr BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-maktx = lt_makt-maktx.
    ENDIF.
    READ TABLE lt_lfa1 WITH KEY lifnr = gt_out-lifnr BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-name1 = lt_lfa1-name1.
    ENDIF.


    lv_objek = gt_out-matnr.
    CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS'
      EXPORTING
*       CLASS              = ' '
*       CLASSTEXT          = 'X'
        classtype          = '001'
*       CLINT              = 0
*       FEATURES           = 'X'
        language           = sy-langu
        object             = lv_objek
        objecttable        = 'MARA'
*       KEY_DATE           = SY-DATUM
*       INITIAL_CHARACT    = 'X'
*       NO_VALUE_DESCRIPT  =
*       CHANGE_SERVICE_CLF = 'X'
*       INHERITED_CHAR     = ' '
*       CHANGE_NUMBER      = ' '
      TABLES
        t_class            = ls_class
        t_objectdata       = ls_objectdata
*       I_SEL_CHARACTERISTIC       =
*       T_NO_AUTH_CHARACT  =
      EXCEPTIONS
        no_classification  = 1
        no_classtypes      = 2
        invalid_class_type = 3
        OTHERS             = 4.

    READ TABLE ls_objectdata WITH  KEY atnam =  'ZROH_PCBCS'.
    IF sy-subrc = 0.
      gt_out-atwrt = ls_objectdata-ausp1.
    ENDIF.

    READ TABLE ls_objectdata WITH  KEY atnam =  'ZROH_PCBGY' .
    IF sy-subrc = 0 and ls_objectdata-ausp1 <> '?'.
      gt_out-atwrt1 = ls_objectdata-ausp1.
    ENDIF.

    MODIFY gt_out.
    CLEAR: lv_knumh,lv_objek.
    CLEAR: lv_col,gt_out,ls_objectdata.
  ENDLOOP.
  IF p1 = 'X'.
    DELETE gt_out WHERE kbetr1 = 0.
  ENDIF.

  SORT gt_out .
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_fieldcat .
  mcr_build_fieldcat:
*                      'WERKS'    '工厂'          'WERKS'     'MARD'   ,
                     'MATNR'    '物料'          'MATNR'     'MARD' ''  ,
                     'MAKTX'    '物料描述'      'MAKTX'     'MAKT' ''  ,
                     'LIFNR'    '供应商'         'LIFNR'     'LFA1'  ''  ,
                      'ESOKZ'    '信息类型'         'ESOKZ'     'EINE'  ''  ,
                     'NAME1'    '供应商描述'         'NAME1'     'LFA1'  ''  ,
                     'MATKL'    '物料组'         'MATKL'     'MARA' ''   ,
                     'WGBEZ'    '物料组描述'         'WGBEZ'     'T023T' ''   ,
                     'EKGRP'    '采购组'         'EKGRP'     'T024' ''   ,
                     'EKNAM'    '采购组描述'         'EKNAM'     'T024' ''  ,
                     'INFNR'    '文件记录号'         'INFNR'     'EINA'  ''  ,
                     'ATWRT'    'PCB参数'         'ATWRT'     'AUSP'  ''  ,
                     'ATWRT1'    'PCB工艺'         'ATWRT'     'AUSP'  ''  ,
                     'KPEIN'    '定价单位'      'KPEIN'     'KONP'  ''  ,
                     'KMEIN'    '计量单位'      'KMEIN'     'KONP'  ''  ,
                     'KONWA'    '条件货币'      'KONWA'     'KONP'  ''  ,
                     'UMREN'    '数量转化1'      ''     ''  ''  ,
                     'MEINS'    '转化单位1 '      'LMEIN'     'EINA'  ''  ,
                     'UMREZ'    '数量转化2'      ''     ''  ''  ,
                     'LMEIN'    '转化单位2'      'LMEIN'     'EINA'  ''  ,
                     'S1'    '等级数量1'      ''     ''   'X' ,
                     'KBETR1'    '阶梯价格1'      'KBETR' 'KONM'    ''    ,
                     'S2'    '等级数量2'      ''     ''  'X'  ,
                     'KBETR2'    '阶梯价格2'       'KBETR' 'KONM'    ''    ,
                     'S3'    '等级数量3'      ''     ''   'X' ,
                     'KBETR3'    '阶梯价格3'       'KBETR' 'KONM'    ''    ,
                     'S4'    '等级数量4'      ''     ''   'X' ,
                     'KBETR4'    '阶梯价格4'       'KBETR' 'KONM'    ''    ,
                     'S5'    '等级数量5'      ''     ''   'X' ,
                     'KBETR5'    '阶梯价格5'      'KBETR' 'KONM'     ''    ,
                     'S6'    '等级数量6'      ''     ''   'X' ,
                     'KBETR6'    '阶梯价格6'       'KBETR' 'KONM'    ''    ,
                     'S7'    '等级数量7'      ''     ''   'X' ,
                     'KBETR7'    '阶梯价格7'       'KBETR' 'KONM'    ''    ,
                     'S8'    '等级数量8'      ''     ''  'X'  ,
                     'KBETR8'    '阶梯价格8'       'KBETR' 'KONM'    ''
                     .
  gs_layout-no_toolbar = 'X'.
  gs_layout-cwidth_opt = 'X'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_OUTPUT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_output_data .
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
*     I_INTERFACE_CHECK        = ' '
*     I_BYPASSING_BUFFER       =
*     I_BUFFER_ACTIVE          =
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'FRM_PF_STATUS'
      i_callback_user_command  = 'FRM_USER_COMMAND'
*     I_CALLBACK_TOP_OF_PAGE   = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME         =
*     I_BACKGROUND_ID          = ' '
*     I_GRID_TITLE             =
*     I_GRID_SETTINGS          =
      is_layout_lvc            = gs_layout
      it_fieldcat_lvc          = gt_fcat[]
*     IT_EXCLUDING             =
*     IT_SPECIAL_GROUPS_LVC    =
*     IT_SORT_LVC              =
*     IT_FILTER_LVC            =
*     IT_HYPERLINK             =
*     IS_SEL_HIDE              =
      i_default                = 'X'
      i_save                   = 'A'
*     IS_VARIANT               =
*     IT_EVENTS                =
*     IT_EVENT_EXIT            =
*     IS_PRINT_LVC             =
*     IS_REPREP_ID_LVC         =
*     I_SCREEN_START_COLUMN    = 0
*     I_SCREEN_START_LINE      = 0
*     I_SCREEN_END_COLUMN      = 0
*     I_SCREEN_END_LINE        = 0
*     I_HTML_HEIGHT_TOP        =
*     I_HTML_HEIGHT_END        =
*     IT_ALV_GRAPHICS          =
*     IT_EXCEPT_QINFO_LVC      =
*     IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*     E_EXIT_CAUSED_BY_CALLER  =
*     ES_EXIT_CAUSED_BY_USER   =
    TABLES
      t_outtab                 = gt_out[]
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  FRM_PF_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_pf_status USING rt_extab TYPE slis_t_extab.
  SET PF-STATUS 'PF_1000'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_USER_COMMAND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_user_command USING r_ucomm LIKE sy-ucomm
                            rs_selfield TYPE slis_selfield..
  DATA:lv_grid TYPE REF TO cl_gui_alv_grid.

  rs_selfield-refresh = 'X'.
  rs_selfield-col_stable = 'X'.
  rs_selfield-row_stable = 'X'.

  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = lv_grid.

  CALL METHOD lv_grid->check_changed_data( ).

  CASE r_ucomm.

    WHEN OTHERS.
  ENDCASE.
ENDFORM.
