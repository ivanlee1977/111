*&---------------------------------------------------------------------*
*&  包含                ZRPSD006F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  FRM_CHECK_AUTH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_check_auth .
  DATA:lt_tvv1 LIKE tvv1 OCCURS 0 WITH HEADER LINE.

  CHECK sy-ucomm = 'ONLI'.

***获取业务员的权限
  REFRESH r_kvgr1.
  SELECT * INTO TABLE lt_tvv1 FROM tvv1.
  LOOP AT lt_tvv1.
    AUTHORITY-CHECK OBJECT 'Z_KVGR1'
             ID 'KVGR1' FIELD lt_tvv1-kvgr1.
    IF sy-subrc = 0.
      r_kvgr1 = 'IEQ'.
      r_kvgr1-low = lt_tvv1-kvgr1.
      APPEND r_kvgr1.
      CLEAR r_kvgr1.
    ENDIF.
  ENDLOOP.
  IF r_kvgr1[] IS INITIAL.
    MESSAGE '你没有任何业务员的权限' TYPE 'E'.
  ENDIF.

***检查审批的权限
  AUTHORITY-CHECK OBJECT 'Z_LIFSK'
             ID 'LIFSK' FIELD '30'.
  IF sy-subrc = 0.
    gv_lifsk = '30'.
    EXIT.
  ENDIF.

  AUTHORITY-CHECK OBJECT 'Z_LIFSK'
           ID 'LIFSK' FIELD '20'.
  IF sy-subrc = 0.
    gv_lifsk = '20'.
    EXIT.
  ENDIF.
  IF gv_lifsk IS INITIAL.
    MESSAGE '你没有销售订单审批或取消审批的权限' TYPE 'E'.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_data .
  DATA:BEGIN OF lt_kna1 OCCURS 0,
         kunnr LIKE kna1-kunnr,
         name1 LIKE kna1-name1,
         kukla LIKE kna1-kukla,
       END OF lt_kna1.
  DATA:lt_tvlst LIKE tvlst OCCURS 0 WITH HEADER LINE,
       lt_tvv2t LIKE tvv2t OCCURS 0 WITH HEADER LINE,
       lt_t171t LIKE t171t OCCURS 0 WITH HEADER LINE,
       lt_tvkbt LIKE tvkbt OCCURS 0 WITH HEADER LINE,
       lt_tvv1t LIKE tvv1t OCCURS 0 WITH HEADER LINE,
       lt_t151t LIKE t151t OCCURS 0 WITH HEADER LINE,
       lt_tkukt LIKE tkukt OCCURS 0 WITH HEADER LINE,
       lt_tvzbt LIKE tvzbt OCCURS 0 WITH HEADER LINE,
       lt_tvakt LIKE tvakt OCCURS 0 WITH HEADER LINE.

  DATA:BEGIN OF lt_vbpa OCCURS 0,
         vbeln LIKE vbpa-vbeln,
         posnr LIKE vbpa-posnr,
         parvw LIKE vbpa-parvw,
         kunnr LIKE vbpa-kunnr,
         adrnr LIKE vbpa-adrnr,
         name1 LIKE adrc-name1,
       END OF lt_vbpa.


  DATA:BEGIN OF lt_cdpos OCCURS 0.
      INCLUDE STRUCTURE cdhdr.
  DATA:fname     LIKE cdpos-fname,
       chngind   LIKE cdpos-chngind,
       value_new LIKE cdpos-value_new,
       value_old LIKE cdpos-value_old,
       END OF lt_cdpos.

  DATA:lv_lifsk LIKE vbak-lifsk.

  DATA:lt_t001l LIKE t001l OCCURS 0 WITH HEADER LINE,
       lt_tvaut LIKE tvaut OCCURS 0 WITH HEADER LINE.


  IF r1 = 'X'. "未审批
    lv_lifsk = gv_lifsk - 10.
  ELSE.
    lv_lifsk = gv_lifsk.
  ENDIF.

***抓取满足条件的销售订单数据
  SELECT a~vbeln
         a~kunnr
         a~audat
         a~lifsk
         a~vbeln AS objectid
         a~auart
         b~posnr
         b~matnr
         b~arktx
         b~kwmeng
         b~zmeng
         b~meins
         b~netwr
         b~mwsbp
         a~waerk
         a~kvgr2
         a~vkorg
         a~vtweg
         a~spart
         c~bzirk
         a~vkbur
         a~kvgr1
         c~kdgrp
         c~zterm
         b~werks
         b~lgort
         a~augru
    INTO CORRESPONDING FIELDS OF TABLE gt_out
    FROM vbak AS a
    INNER JOIN vbap AS b
    ON a~vbeln = b~vbeln
    INNER JOIN vbkd AS c
    ON a~vbeln = c~vbeln
    AND c~posnr = '000000'
    WHERE a~vkorg IN s_vkorg
      AND a~lifsk = lv_lifsk
      AND c~bzirk IN s_bzirk
      AND a~kvgr1 IN s_kvgr1
      AND a~kvgr2 IN s_kvgr2
      AND a~kunnr IN s_kunnr
      AND a~vbeln IN s_vbeln
      AND a~audat IN s_audat
      AND a~vbtyp NE 'G'
      AND a~kvgr1 IN r_kvgr1.

***如果是30权限，需要抓取自己创建的10的审批状态的单
  IF gv_lifsk = '30' AND r1 = 'X'.
    SELECT a~vbeln
           a~kunnr
           a~audat
           a~lifsk
           a~vbeln AS objectid
           a~auart
           b~posnr
           b~matnr
           b~arktx
           b~kwmeng
           b~zmeng
           b~meins
           b~netwr
           b~mwsbp
           a~waerk
           a~kvgr2
           a~vkorg
           a~vtweg
           a~spart
           c~bzirk
           a~vkbur
           a~kvgr1
           c~kdgrp
           c~zterm
           b~werks
           b~lgort
           a~augru
      APPENDING CORRESPONDING FIELDS OF TABLE gt_out
      FROM vbak AS a
      INNER JOIN vbap AS b
      ON a~vbeln = b~vbeln
      INNER JOIN vbkd AS c
      ON a~vbeln = c~vbeln
      AND c~posnr = '000000'
      WHERE a~vkorg IN s_vkorg
        AND a~lifsk = '10'
        AND c~bzirk IN s_bzirk
        AND a~kvgr1 IN s_kvgr1
        AND a~kvgr2 IN s_kvgr2
        AND a~kunnr IN s_kunnr
        AND a~vbeln IN s_vbeln
        AND a~audat IN s_audat
        AND a~vbtyp NE 'G'
        AND a~ernam = sy-uname.
  ENDIF.

  CHECK gt_out[] IS NOT INITIAL.
***客户名称
  SELECT kunnr name1 kukla
    INTO CORRESPONDING FIELDS OF TABLE lt_kna1
    FROM kna1
    FOR ALL ENTRIES IN gt_out
    WHERE kunnr = gt_out-kunnr.
***交货状态描述
  SELECT * INTO TABLE lt_tvlst FROM tvlst WHERE spras = sy-langu.
***取销售订单类型描述
  SELECT * INTO TABLE lt_tvakt FROM tvakt WHERE spras = sy-langu.
  SORT lt_tvakt BY auart.

***抓取送达方的客户名称
  SELECT a~vbeln
         a~posnr
         a~parvw
         a~kunnr
         a~adrnr
         b~name1
    INTO CORRESPONDING FIELDS OF TABLE lt_vbpa
    FROM vbpa AS a
    INNER JOIN adrc AS b
    ON a~adrnr = b~addrnumber
    FOR ALL ENTRIES IN gt_out
    WHERE a~vbeln = gt_out-vbeln
      AND a~parvw = 'WE'
      AND a~posnr = '000000'.
***抓取商务或经理确认日期
  SELECT a~objectclas
         a~objectid
         a~changenr
         a~username
         a~udate
         a~utime
         b~fname
         b~chngind
         b~value_new
         b~value_old
    INTO CORRESPONDING FIELDS OF TABLE lt_cdpos
    FROM cdhdr AS a
    INNER JOIN cdpos AS b
    ON a~objectclas = b~objectclas
    AND a~objectid  = b~objectid
    AND a~changenr  = b~changenr
    FOR ALL ENTRIES IN gt_out
    WHERE a~objectclas = 'VERKBELEG'
      AND a~objectid   =  gt_out-objectid
      AND b~fname = 'LIFSK'.
  DELETE lt_cdpos WHERE value_new NE '20' AND value_new NE '30'.
  SORT lt_cdpos BY objectclas objectid value_new udate DESCENDING utime DESCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_cdpos COMPARING objectclas objectid value_new.

***商务人员描述
  SELECT * INTO TABLE lt_tvv2t FROM tvv2t WHERE spras = sy-langu.
***大区描述
  SELECT * INTO TABLE lt_t171t FROM t171t WHERE spras = sy-langu.
***行办描述
  SELECT * INTO TABLE lt_tvkbt FROM tvkbt WHERE spras = sy-langu.
***业务员描述
  SELECT * INTO TABLE lt_tvv1t FROM tvv1t WHERE spras = sy-langu.
***行业描述
  SELECT * INTO TABLE lt_t151t FROM t151t WHERE spras = sy-langu.
***客户分类描述
  SELECT * INTO TABLE lt_tkukt FROM tkukt WHERE spras = sy-langu.
***付款条件描述
  SELECT * INTO TABLE lt_tvzbt FROM tvzbt WHERE spras = sy-langu.
***库位描述
  SELECT * INTO TABLE lt_t001l FROM t001l FOR ALL ENTRIES IN gt_out WHERE werks = gt_out-werks AND lgort = gt_out-lgort.
***订单原因描述
  SELECT * INTO TABLE lt_tvaut FROM tvaut WHERE spras = sy-langu.

  SORT lt_kna1  BY kunnr.
  SORT lt_tvlst BY lifsp.
  SORT lt_tvv2t BY kvgr2.
  SORT lt_t171t BY bzirk.
  SORT lt_tvkbt BY vkbur.
  SORT lt_tvv1t BY kvgr1.
  SORT lt_t151t BY kdgrp.
  SORT lt_tkukt BY kukla.
  SORT lt_tvzbt BY zterm.
  SORT lt_vbpa BY vbeln.
  SORT lt_t001l BY werks lgort.
  SORT lt_tvaut BY augru.

***整理数据到输出表
  LOOP AT gt_out.
***check 销售组织权限
    AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
             ID 'VKORG' FIELD gt_out-vkorg
             ID 'VTWEG' FIELD gt_out-vtweg
             ID 'SPART' FIELD gt_out-spart
             ID 'ACTVT' FIELD '03'.
    IF sy-subrc <> 0.
      DELETE gt_out.
      CONTINUE.
    ENDIF.

***客户名称 & 分类
    READ TABLE lt_kna1 WITH KEY kunnr = gt_out-kunnr BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-name1 = lt_kna1-name1.
      gt_out-kukla = lt_kna1-kukla.
    ENDIF.

***客户名称
    READ TABLE lt_vbpa WITH KEY vbeln = gt_out-vbeln BINARY SEARCH.
    IF sy-subrc = 0 AND ( gt_out-kunnr = 'A000' OR gt_out-kunnr = 'C000' ).
      gt_out-name1 = lt_vbpa-name1.
    ENDIF.

***订单状态描述
    READ TABLE lt_tvlst WITH KEY lifsp = gt_out-lifsk BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-vtext = lt_tvlst-vtext.
    ENDIF.
***金额
    gt_out-amount = gt_out-netwr + gt_out-mwsbp.
***单价
    IF gt_out-auart = 'ZDR1' OR gt_out-auart = 'ZCR1'.
      gt_out-kwmeng = gt_out-zmeng.
    ENDIF.
    IF gt_out-kwmeng NE 0.
      gt_out-netpr = gt_out-amount / gt_out-kwmeng.
    ENDIF.
***经理\主管确认日期
    IF gt_out-lifsk EQ '30'.
      READ TABLE lt_cdpos WITH KEY objectid = gt_out-objectid value_new = '30'.
      IF sy-subrc = 0.
        gt_out-zjlqr = lt_cdpos-udate.
      ENDIF.
    ENDIF.
***商务确认日期
    IF gt_out-lifsk >= '20'.
      READ TABLE lt_cdpos WITH KEY objectid = gt_out-objectid value_new = '20'.
      IF sy-subrc = 0.
        gt_out-zswqr = lt_cdpos-udate.
      ENDIF.
    ENDIF.
***商务人员描述
    READ TABLE lt_tvv2t WITH KEY kvgr2 = gt_out-kvgr2 BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-bezei = lt_tvv2t-bezei.
    ENDIF.
***大区描述
    READ TABLE lt_t171t WITH KEY bzirk = gt_out-bzirk BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-bztxt = lt_t171t-bztxt.
    ENDIF.
***行办描述
    READ TABLE lt_tvkbt WITH KEY vkbur = gt_out-vkbur BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-vkbur_txt = lt_tvkbt-bezei.
    ENDIF.
***业务员描述
    READ TABLE lt_tvv1t WITH KEY kvgr1 = gt_out-kvgr1 BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-kvgr1_txt = lt_tvv1t-bezei.
    ENDIF.
***行业描述
    READ TABLE lt_t151t WITH KEY kdgrp = gt_out-kdgrp BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-kdgrp_txt = lt_t151t-ktext.
    ENDIF.
***客户分类描述
    READ TABLE lt_tkukt WITH KEY kukla = gt_out-kukla BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-kukla_txt = lt_tkukt-vtext.
    ENDIF.
***付款条件描述
    READ TABLE lt_tvzbt WITH KEY zterm = gt_out-zterm BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-zterm_txt = lt_tvzbt-vtext.
    ENDIF.
***取订单类型描述
    READ TABLE lt_tvakt WITH KEY auart = gt_out-auart BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-bezei_auart = lt_tvakt-bezei.
    ENDIF.
***库位描述
    READ TABLE lt_t001l WITH KEY werks = gt_out-werks lgort = gt_out-lgort BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-lgobe = lt_t001l-lgobe.
    ENDIF.
***订单原因描述
    READ TABLE lt_tvaut WITH KEY augru = gt_out-augru BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-augru_txt = lt_tvaut-bezei.
    ENDIF.
***销售订单文本
    IF gt_out-auart EQ 'ZCR1' OR gt_out-auart EQ 'ZDR1'. "借贷项文本
      PERFORM frm_get_text USING gt_out-vbeln 'Z007' CHANGING gt_out-ztext7.
    ELSE.
      PERFORM frm_get_text USING gt_out-vbeln 'Z001' CHANGING gt_out-ztext1.
      PERFORM frm_get_text USING gt_out-vbeln 'Z002' CHANGING gt_out-ztext2.
      PERFORM frm_get_text USING gt_out-vbeln 'Z003' CHANGING gt_out-ztext3.
      PERFORM frm_get_text USING gt_out-vbeln 'Z004' CHANGING gt_out-ztext4.
      PERFORM frm_get_text USING gt_out-vbeln 'Z005' CHANGING gt_out-ztext5.
      PERFORM frm_get_text USING gt_out-vbeln 'Z006' CHANGING gt_out-ztext6.
    ENDIF.
***贷项订单和退货订单、样品退货订单的金额为负 add by wusk 20180115
    IF gt_out-auart = 'ZRE1' OR  gt_out-auart = 'ZKA' OR gt_out-auart = 'ZCR1'.
      gt_out-amount = gt_out-amount  * -1.
    ENDIF.
    MODIFY gt_out.
  ENDLOOP.

  SORT gt_out BY vbeln posnr.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_fieldcat .

  mcr_build_fieldcat:'ZSTAT'   '状态'         ''        ''      'C'  '30',
                     'ZMSG'    '消息'         ''        ''      'C'  '50',
                     'VBELN'   '销售订单号'   'VBELN'   'VBAK'  ''   '',
                     'POSNR'   '项次'         'POSNR'   'VBAP'  ''   '',
                     'KUNNR'   '客户'         'KUNNR'   'VBAK'  ''   '',
                     'NAME1'   '客户名称'     'NAME1'   'KNA1'  ''   '',
                     'AUDAT'   '订单日期'     'AUDAT'   'VBAK'  ''   '',
                      'AUART'   '订单类型'   'AUART'   'VBAK'  ''   '',
                     'BEZEI_AUART'   '订单类型描述'   'BEZEI'   'TVAKT'  ''   '',
                     'LIFSK'   '订单状态'     'LIFSK'   'VBAK'  ''   '',
                     'VTEXT'   '订单状态描述' 'VTEXT'   'TVLST'  ''   '',
                     'MATNR'   '物料号码'     'MATNR'   'VBAP'  ''   '',
                     'ARKTX'   '物料描述'     'ARKTX'   'VBAP'  ''   '',
                     'KWMENG'  '数量'         'KWMENG'  'VBAP'  ''   '',
                     'MEINS'   '单位'         'MEINS'   'VBAP'  ''   '',
                     'NETPR'   '单价'         ''        ''     'P'  '15',
                     'AMOUNT'  '金额'         ''        ''     'P'  '15',
                     'WAERK'   '币别'         'WAERK'   'VBAK' ''   '',
                     'ZSWQR'   '商务确认日期' ''        ''      'D'  '10',
                     'ZJLQR'   '经理\主管确认日期' ''   ''      'D'  '10',
                     'KVGR2'   '商务人员'     'KVGR2'   'VBAK'   ''  '',
                     'BEZEI'   '商务人员描述' 'BEZEI'   'TVV2T'   ''  '',
                     'VKORG'   '销售组织'     'VKORG'   'VBAK'   ''  '',
                     'VTWEG'   '分销渠道'     'VTWEG'   'VBAK'   ''  '',
                     'BZIRK'   '大区'         'BZIRK'   'VBKD'   ''  '',
                     'BZTXT'   '大区描述'     'BZTXT'   'T171T'   ''  '',
                     'VKBUR'   '行办'         'VKBUR'   'VBAK'   ''  '',
                     'VKBUR_TXT' '行办描述'   'BEZEI'   'TVKBT'   ''  '',
                     'KVGR1'   '业务员'       'KVGR1'   'VBAK'   ''  '',
                     'KVGR1_TXT' '业务员描述' 'BEZEI'   'TVV1T'   ''  '',
                     'KDGRP'    '行业'        'KDGRP'   'VBKD'   ''  '',
                     'KDGRP_TXT' '行业描述'   'KTEXT'   'T151T'   ''  '',
                     'KUKLA'    '客户分类'    'KUKLA'   'KNA1'   ''  '',
                     'KUKLA_TXT' '客户分类描述' 'VTEXT'   'TKUKT'   ''  '',
                     'ZTERM'     '付款条件'   'ZTERM'   'VBKD'   ''  '',
                     'ZTERM_TXT' '付款条件描述'   'VTEXT'   'TVZBT'   ''  '',
                     'LGORT'   '库位'         'LGORT'   'VBAP'   ''  '',
                     'LGOBE'   '库位描述'     'LGOBE'   'T001L'   ''  '',
                     'AUGRU'   '订单原因'     'AUGRU'   'VBAK'   ''  '',
                     'AUGRU_TXT'   '订单原因描述'     'BEZEI'   'TVAUT'   ''  '',
                     'ZTEXT1'   '注意事项'     ''   ''   'C'  '255',
                     'ZTEXT2'   '提单要求'     ''   ''   'C'  '255',
                     'ZTEXT3'   '标签要求'     ''   ''   'C'  '255',
                     'ZTEXT4'   '箱唛要求'     ''   ''   'C'  '255',
                     'ZTEXT5'   '随货单证'     ''   ''   'C'  '255',
                     'ZTEXT6'   '特殊包装'     ''   ''   'C'  '255',
                     'ZTEXT7'   '借贷项文本'   ''   ''   'C'  '255'.

  gs_layout-cwidth_opt = 'X'.
  gs_layout-zebra = 'X'.
  gs_layout-box_fname = 'CHECK'.
  gs_layout-sel_mode  = 'A'.
  gs_layout-no_toolbar = 'X'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_OUTPUT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_output_data .
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
*     I_INTERFACE_CHECK        = ' '
*     I_BYPASSING_BUFFER       =
*     I_BUFFER_ACTIVE          =
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'FRM_PF_STATUS'
      i_callback_user_command  = 'FRM_USER_COMMAND'
*     I_CALLBACK_TOP_OF_PAGE   = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME         =
*     I_BACKGROUND_ID          = ' '
*     I_GRID_TITLE             =
*     I_GRID_SETTINGS          =
      is_layout_lvc            = gs_layout
      it_fieldcat_lvc          = gt_fcat[]
*     IT_EXCLUDING             =
*     IT_SPECIAL_GROUPS_LVC    =
*     IT_SORT_LVC              =
*     IT_FILTER_LVC            =
*     IT_HYPERLINK             =
*     IS_SEL_HIDE              =
      i_default                = 'X'
      i_save                   = 'A'
*     IS_VARIANT               =
*     IT_EVENTS                =
*     IT_EVENT_EXIT            =
*     IS_PRINT_LVC             =
*     IS_REPREP_ID_LVC         =
*     I_SCREEN_START_COLUMN    = 0
*     I_SCREEN_START_LINE      = 0
*     I_SCREEN_END_COLUMN      = 0
*     I_SCREEN_END_LINE        = 0
*     I_HTML_HEIGHT_TOP        =
*     I_HTML_HEIGHT_END        =
*     IT_ALV_GRAPHICS          =
*     IT_EXCEPT_QINFO_LVC      =
*     IR_SALV_FULLSCREEN_ADAPTER        =
*   IMPORTING
*     E_EXIT_CAUSED_BY_CALLER  =
*     ES_EXIT_CAUSED_BY_USER   =
    TABLES
      t_outtab                 = gt_out[]
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FRM_PF_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_pf_status USING rt_extab TYPE slis_t_extab.
  IF r1 = 'X'.
    SET PF-STATUS 'PF_1000' EXCLUDING 'ZUNDOREL'.
  ELSEIF r2 = 'X'.
    SET PF-STATUS 'PF_1000' EXCLUDING 'ZDOREL'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_USER_COMMAND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_user_command USING r_ucomm LIKE sy-ucomm
                            rs_selfield TYPE slis_selfield..
  DATA:lv_grid TYPE REF TO cl_gui_alv_grid.

  rs_selfield-refresh = 'X'.
  rs_selfield-col_stable = 'X'.
  rs_selfield-row_stable = 'X'.

  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = lv_grid.

  CASE r_ucomm.
    WHEN 'ZDOREL'.  "审批
      PERFORM frm_release_so USING 'R'.
*      PERFORM frm_refresh_display USING lv_grid.
    WHEN 'ZUNDOREL'. "取消审批
      PERFORM frm_release_so USING 'U'.
*      PERFORM frm_refresh_display USING lv_grid.
    WHEN '&IC1'.
      CHECK  rs_selfield-fieldname = 'VBELN'.
      SET PARAMETER ID 'AUN' FIELD rs_selfield-value.
      CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_RELEASE_SO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_release_so USING u_flag TYPE c.
  DATA:lt_data LIKE gt_out OCCURS 0 WITH HEADER LINE.
  DATA:ls_header_in  LIKE bapisdh1,
       ls_header_inx LIKE bapisdh1x.
  DATA:lt_return LIKE bapiret2 OCCURS 0 WITH HEADER LINE.
  DATA:lv_msg     TYPE string,
       lv_msg_all TYPE string.

  READ TABLE gt_out WITH KEY check = 'X'.
  IF sy-subrc NE 0.
    MESSAGE '请至少选择一行数据' TYPE 'E' DISPLAY LIKE 'S'.
    EXIT.
  ENDIF.

  APPEND LINES OF gt_out TO lt_data.
  DELETE lt_data WHERE check IS INITIAL OR zstat = icon_led_green..
  SORT lt_data BY vbeln.
  DELETE ADJACENT DUPLICATES FROM lt_data COMPARING vbeln.

  LOOP AT lt_data.
    CASE u_flag.
      WHEN 'R'.
        ls_header_in-dlv_block = gv_lifsk.
      WHEN 'U'.
        ls_header_in-dlv_block = gv_lifsk - 10.
      WHEN OTHERS.
    ENDCASE.
    ls_header_inx-updateflag = 'U'.
    ls_header_inx-dlv_block = 'X'.

    REFRESH lt_return.
    CLEAR lt_return.
    CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
      EXPORTING
        salesdocument    = lt_data-vbeln
        order_header_in  = ls_header_in
        order_header_inx = ls_header_inx
      TABLES
        return           = lt_return.
    LOOP AT lt_return WHERE type = 'E' OR type = 'A'.
      EXIT.
    ENDLOOP.
    IF sy-subrc = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      CLEAR:lv_msg,lv_msg_all.
      LOOP AT lt_return WHERE type = 'E' OR type = 'A'.
        CLEAR lv_msg.
        CALL FUNCTION 'MESSAGE_TEXT_BUILD'
          EXPORTING
            msgid               = lt_return-id
            msgnr               = lt_return-number
            msgv1               = lt_return-message_v1
            msgv2               = lt_return-message_v2
            msgv3               = lt_return-message_v3
            msgv4               = lt_return-message_v4
          IMPORTING
            message_text_output = lv_msg.
        IF lv_msg_all IS INITIAL.
          lv_msg_all = lv_msg.
        ELSE.
          CONCATENATE lv_msg_all lv_msg INTO lv_msg_all SEPARATED BY ','.
        ENDIF.
      ENDLOOP.

      LOOP AT gt_out WHERE vbeln = lt_data-vbeln.
        gt_out-zstat = icon_led_red.
        gt_out-zmsg = lv_msg_all.
        MODIFY gt_out.
      ENDLOOP.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
      LOOP AT gt_out WHERE vbeln = lt_data-vbeln.
        IF r1 = 'X'.
          gt_out-lifsk = gv_lifsk.
          IF gv_lifsk EQ '30'.
            gt_out-zjlqr = sy-datum.
          ELSEIF gv_lifsk EQ '20'.
            gt_out-zswqr = sy-datum.
          ENDIF.
          gt_out-zmsg = '审批成功'.
        ELSE.
          gt_out-zmsg = '撤消审批成功'.
          IF gv_lifsk EQ '30'.
            CLEAR gt_out-zjlqr.
          ELSEIF gv_lifsk EQ '20'.
            CLEAR gt_out-zswqr.
          ENDIF.
          gt_out-lifsk = gv_lifsk - 10.
        ENDIF.
        SELECT SINGLE vtext INTO gt_out-vtext FROM tvlst WHERE spras = sy-langu AND lifsp = gt_out-lifsk.
        gt_out-zstat = icon_led_green.
        MODIFY gt_out.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_REFRESH_DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_GRID  text
*----------------------------------------------------------------------*
FORM frm_refresh_display  USING  u_grid TYPE REF TO cl_gui_alv_grid.

  LOOP AT gt_fcat WHERE fieldname = 'ZSTAT' OR fieldname = 'ZMSG'.
    gt_fcat-tech = space.
    MODIFY gt_fcat.
  ENDLOOP.

  CALL METHOD u_grid->set_frontend_fieldcatalog
    EXPORTING
      it_fieldcatalog = gt_fcat[].

  CALL METHOD u_grid->set_frontend_layout
    EXPORTING
      is_layout = gs_layout.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_TEXT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_LINES  text
*      -->P_1202   text
*      -->P_LV_NAME  text
*      -->P_1204   text
*----------------------------------------------------------------------*
FORM frm_get_text USING  u_vbeln LIKE vbak-vbeln
                          u_id TYPE thead-tdid
                  CHANGING c_text TYPE c.
  DATA:lv_name   TYPE thead-tdname.
  DATA:lt_lines LIKE tline OCCURS 0 WITH HEADER LINE.

  lv_name =  u_vbeln.

  CLEAR c_text.
  CALL FUNCTION 'READ_TEXT'
    EXPORTING
      id                      = u_id
      language                = sy-langu
      name                    = lv_name
      object                  = 'VBBK'
    TABLES
      lines                   = lt_lines
    EXCEPTIONS
      id                      = 1
      language                = 2
      name                    = 3
      not_found               = 4
      object                  = 5
      reference_check         = 6
      wrong_access_to_archive = 7
      OTHERS                  = 8.

  DELETE lt_lines WHERE tdline IS INITIAL.
  LOOP AT lt_lines.
    IF c_text IS INITIAL.
      c_text = lt_lines-tdline.
    ELSE.
      CONCATENATE c_text lt_lines-tdline INTO c_text.
    ENDIF.
    CONDENSE c_text.
  ENDLOOP.

ENDFORM.
